ArchiveEntry "LICS: 1 Continuous car accelerates forward".

ProgramVariables. /* program variables may change their value over time */
  R x.            /* position of the car */
  R v.            /* velocity of the car */
  R a.            /* acceleration of the car */
End.

Problem.          /* differential dynamic logic formula */
    v>=0 & a>=0
 -> [
      {x'=v, v'=a & v>=0}
    ] v>=0
End.

Tactic "LICS: 1 Continuous car accelerates forward: Clever Proof".
  implyR(1) ; dW(1) ; prop; done
End.

Tactic "LICS: 1 Continuous car accelerates forward: Interactive Proof".
  implyR(1) ; solve(1) ; QE
End.
       
Tactic "LICS: 1 Continuous car accelerates forward: Proof 2".
  master
End.
       

End.
ArchiveEntry "LICS: 2 Single car drives forward".

Functions.        /* function symbols cannot change their value */
  R b().          /* braking capabilities */
  R A().          /* maximum acceleration */
End.

ProgramVariables. /* program variables may change their value over time */
  R x.            /* position of the car */
  R v.            /* velocity of the car */
  R a.            /* acceleration of the car */
End.

Problem.          /* differential dynamic logic formula */
    v>=0  & A>=0 & b>0
 -> [
      {
        {a:=A; ++ a:=-b;}
        {x'=v, v'=a & v>=0}
      }*@invariant(v>=0)
    ] v>=0
End.

Tactic "LICS: 2 Single car drives forward: Clever Proof".
implyR(1) ; loop({`v>=0`}, 1) ; <(
  closeId,
  closeId,
  composeb(1) ; choiceb(1) ; andR(1) ; <(
    assignb(1) ; dW(1) ; prop ; done,
    assignb(1) ; dW(1) ; prop ; done
    )
  )
End.

Tactic "LICS: 2 Single car drives forward: Interactive Proof".
  implyR(1) ; loop({`v>=0`}, 1) ; <(
  closeId,
  closeId,
  composeb(1) ; choiceb(1) ; andR(1) ; <(
    assignb(1) ; solve(1) ; QE,
    assignb(1) ; solve(1) ; QE
    )
  )
End.
       
Tactic "LICS: 2 Single car drives forward: Automatic Proof".
  master
End.
       

End.
ArchiveEntry "LICS: 4a safe stopping of time-triggered car".

Functions.        /* function symbols cannot change their value */
  R b().          /* braking capabilities */
  R A().          /* maximum acceleration */
  R ep().         /* reaction time */
End.

ProgramVariables. /* program variables may change their value over time */
  R x.            /* position of the car */
  R v.            /* velocity of the car */
  R a.            /* acceleration of the car */
  R m.            /* stop sign position */
  R t.            /* clock variable */
End.

Problem.          /* differential dynamic logic formula */
    v^2<=2*b*(m-x) & v>=0  & A>=0 & b>0
 -> [
      {
        {?(2*b*(m-x) >= v^2+(A+b)*(A*ep^2+2*ep*v)); a:=A; ++ a:=-b; }
        t := 0;
        {x'=v, v'=a, t'=1 & v>=0 & t<=ep}
      }*@invariant(v^2<=2*b*(m-x))
    ] x <= m
End.

Tactic "LICS: 4a safety of time-triggered car: Clever Proof".
implyR(1) ; loop({`v^2<=2*b()*(m-x)`}, 1) ; <(
  closeId,
  QE,
  composeb(1) ; choiceb(1) ; andR(1) ; <(
    composeb(1) ; testb(1) ; implyR(1) ; assignb(1) ; composeb(1) ; assignb(1) ; dC({`2*b()*(m-x)>=v^2+(A()+b())*(A()*(ep()-t)^2+2*(ep()-t)*v)`}, 1) ; <(
      dW(1) ; QE,
      dI(1)
      ),
    assignb(1) ; composeb(1) ; assignb(1) ; dI(1)
    )
  )
End.

Tactic "LICS: 4a safety of time-triggered car: Interactive Proof".
  implyR(1) ; loop({`v^2<=2*b()*(m-x)`}, 1) ; <(
  QE,
  QE,
  composeb(1) ; choiceb(1) ; andR(1) ; <(
    composeb(1) ; testb(1) ; implyR(1) ; assignb(1) ; composeb(1) ; assignb(1) ; solveEnd(1) ; QE,
    assignb(1) ; composeb(1) ; assignb(1) ; solveEnd(1) ; QE
    )
  )
End.
       
Tactic "LICS: 4a safety of time-triggered car: Automatic Proof".
  master
End.
       

End.
ArchiveEntry "Bouncing Ball".

Functions.        /* function symbols cannot change their value */
  R H().          /* initial height */
  R g().          /* gravity */
  R c().          /* damping coefficient */
End.

ProgramVariables. /* program variables may change their value over time */
  R x.            /* height */
  R v.            /* velocity */
End.

Problem.
  x>=0 & x=H
  & v=0 & g>0 & 1>=c&c>=0
 ->
  [
    {
      {x'=v,v'=-g&x>=0}
      {?x=0; v:=-c*v;  ++  ?x!=0;}
    }*@invariant(2*g*x<=2*g*H-v^2 & x>=0)
  ] (x>=0 & x<=H)
End.

Tactic "Bouncing Ball: Clever Proof".
implyR(1) ; loop({`2*g()*x<=2*g()*H()-v^2&x>=0`}, 1) ; <(
  QE,
  QE,
  composeb(1) ; dC({`2*g()*x<=2*g()*H()-v^2`}, 1) ; <(
    dW(1) ; implyR(1) ; choiceb(1) ; andR(1) ; <(
      composeb(1) ; testb(1) ; implyR(1) ; assignb(1) ; QE,
      testb(1) ; implyR(1) ; prop ; done
      ),
    dI(1)
    )
  )
End.

Tactic "Bouncing Ball: generalizing as in book".
  implyR(1) ; loop({`2*g()*x<=2*g()*H()-v^2&x>=0`}, 1) ; <(
QE, 
QE, 
composeb(1) ; MR({`2*g()*x<=2*g()*H()-v^2&x>=0&1>=c()&c()>=0&g()>0`}, 1) ; <(
solveEnd(1) ; QE,
  choiceb(1) ; andR(1) ; <(
  composeb(1) ; testb(1) ; implyR(1) ; assignb(1) ; QE, 
    testb(1) ; prop
  )
)
)
End.
       
Tactic "Bouncing Ball: top-level".
  implyR(1) ; loop({`2*g()*x<=2*g()*H()-v^2&x>=0`}, 1) ; <(
QE, 
QE, 
composeb(1) ; solve(1) ; allR(1) ; implyR(1) ; implyR(1) ; allL({`t_`}, -6) ; allR(1) ; implyR(1) ; choiceb(1) ; andR(1) ; <(
composeb(1) ; testb(1) ; implyR(1) ; assignb(1) ; QE, 
  testb(1) ; implyR(1) ; QE
)
)
End.

Tactic "Bouncing Ball: in-place proof".
  implyR(1) ; loop({`2*g()*x<=2*g()*H()-v^2&x>=0`}, 1) ; <(
QE, 
QE, 
composeb(1) ; choiceb(1.1) ; composeb(1.1.0) ; testb(1.1.0) ; assignb(1.1.0.1) ; testb(1.1.1) ; solveEnd(1) ; QE
)
End.
       
Tactic "Bouncing Ball: automatic".
  /* needs QE({`Mathematica`}) */
  master
End.
       

End.
ArchiveEntry "Simple rotational dynamics".

ProgramVariables.
  R v.  /* direction in x-axis */
  R w.  /* direction in y-axis */
  R r.  /* radius r of circle around origin */
End.

Problem.
  v^2+w^2-r^2=0 -> 
    [{v'=w,w'=-v}@invariant(v^2+w^2-r^2=0)] v^2+w^2-r^2=0
End.

Tactic "10: Simple rotational dynamics: Proof 1".
  implyR(1) ; dI(1)
End.
       

End.
ArchiveEntry "Damped Oscillator".

Functions.        /* function symbols cannot change their value */
  R w().          /* undamped angular frequency */
  R c().          /* level of ellipse */
  R d().          /* constant damping ratio */
End.

ProgramVariables. /* program variables may change their value over time */
  R x.            /* position of spring/mass system */
  R y.            /* velocity */
End.

Problem.
    w()^2*x^2 + y^2 <= c()^2
->
  [{x'=y, y'=-w()^2*x-2*d()*w()*y & w()>=0 & d()>=0}]w()^2*x^2 + y^2 <= c()^2
End.

Tactic "Damped Oscillator: Differential invariant proof".
  implyR(1) ; dI(1)
End.

End.


ArchiveEntry "Increasingly Damped Oscillator".

Functions.
  R w().    /* undamped angular frequency */
  R c().    /* level of ellipse */
End.

ProgramVariables.
  R x.      /* position of spring/mass system */
  R y.      /* velocity */
  R d.      /* damping ratio */
End.

Problem.
    w()^2*x^2 + y^2 <= c()^2
  & d>=0
->
  [{x'=y, y'=-w()^2*x-2*d*w()*y, d'=7 & w()>=0}]w()^2*x^2 + y^2 <= c()^2
End.

Tactic "Increasingly Damped Oscillator: Differential cut proof".
  implyR(1) ; dC({`d>=0`}, 1) ; <(
    dI(1), 
    dI(1)
  )
End.
       

End.
ArchiveEntry "Exponential Decay: [x'=-x]x>0".

/**
 * Exponential Decay.
 */
ProgramVariables.
  R x.
End.

Problem.
  x>1 -> [{x'=-x}]x>0
End.

Tactic "Exponential Decay from tactic".
  implyR(1) ; dG({`y'=1/2*y`}, {`x*y^2=1`}, 1) ; dI(1.0) ; QE({`Mathematica`})
End.
 
Tactic "Exponential Decay: Automatic".
  /* needs QE({`Mathematica`}) */
  master
End.
 

End.

ArchiveEntry "Parachute".

Functions.
  R g() = (9).  /* gravity */
  R p() = (1).  /* parachute drag coefficient */
  R a().        /* skydiver air drag coefficient */
  R m().        /* impact velocity */
  R T().        /* skydiver reaction time */
End.

ProgramVariables.
  R x.    /* skydiver altitude */
  R v.    /* skydiver speed (< 0, so lower is faster) */
  R r.    /* skydiver current drag coefficient (depends on parachute open/closed) */
  R t.    /* time */
End.

Problem.
  g()>0 & p()>a() & a()>0 & T()>0 & m()< -(g()/p())^(1/2) &
  x>=0 & v<0 & v> -(g()/p())^(1/2) & r=a()
->
[ {
    {
      ?(v - g()*T() > -(g()/p())^(1/2) & r = a());
      ++
      r := p();
    }
    t := 0;
    {x'=v, v'=-g()+r*v^2, t'=1 & t<=T() & x>=0 & v<0}
  }*@invariant((x>=0 & v<0) & v>-(g()/p())^(1/2))
](x=0 -> v>=m())
End.

Tactic "Parachute: Proof 1".
  /* needs QE({`Mathematica`}) */
  implyR(1) ; loop({`(x>=0&v < 0)&v>-(9/1)^(1/2)`}, 1) ; <(
  QE,
  QE,
  boxAnd(1) ; andR(1) ; <(
    master,
    unfold ; <(
      dC({`v>=old(v)-9*t`}, 1) ; <(
        dW(1) ; QE,
        dI(1)
        ),
      dG({`y'=(-1/2*1*(v-(9/1)^(1/2)))*y`}, {`y^2*(v+(9/1)^(1/2))=1`}, 1) ; dI(1.0) ; QE
      )
    )
  )
End.
       

End.

ArchiveEntry "Dual Filibuster Game".

ProgramVariables.
  R x.
End.

Problem.
  x=0 -> <{{{x:=0;++x:=1;}^@}*@invariant(x=0)}^@> x=0
End.

Tactic "Dual Filibuster Game: Proof 1".
  implyR(1) ; dualDirectd(1) ; loop({`x=0`}, 1) ; <(
  closeId,
  dualDirectb(1) ; choiced(1) ; assignd(1.0) ; assignd(1.1) ; QE,
  closeId
  )
End.
       

End.
ArchiveEntry "Push-around cart".

ProgramVariables.
  R x.     /* cart position */
  R v.     /* cart velocity */
  R a.     /* Angel's acceleration */
  R d.     /* Demon's acceleration */
End.

Problem.
  x>=0 & v>=0
->
  [{
    {d:=1;++d:=-1;}^@    /* Demon chooses push or pull */
    {a:=1;++a:=-1;}      /* Angel chooses push or pull */
    {x'=v,v'=a+d}
   }*@invariant(x>=0 & v>=0)
  ] x>=0
End.

Tactic "Push-around cart: Clever Proof".
  implyR(1) ; loop({`x>=0&v>=0`}, 1) ; <(
  prop ; done,
  composeb(1) ; dualDirectb(1) ; choiced(1) ; orR(1) ; hideR(2) ; assignd(1) ; composeb(1) ; choiceb(1) ; assignb(1.0) ; assignb(1.1) ; andR(1) ; <(
    dC({`v>=0`}, 1) ; <(
      dI(1),
      dI(1)
      ),
    dC({`v>=0`}, 1) ; <(
      dI(1),
      dI(1)
      )
    ),
  prop ; done
  )
End.
       
Tactic "Push-around cart: Interactive Proof".
  implyR(1) ; loop({`x>=0&v>=0`}, 1) ; <(
    prop ; done, 
    composeb(1) ; dualDirectb(1) ; choiced(1) ; orR(1) ; hideR(2) ; assignd(1) ; composeb(1) ; choiceb(1) ; assignb(1.0) ; assignb(1.1) ; andR(1) ; <(
      solve(1) ; QE, 
      solve(1) ; QE
    ), 
    prop ; done
  )
End.
       

End.
       
ArchiveEntry "Wall-E & Eve".

ProgramVariables.
  R w.    /* WALL-E position */
  R v.    /* WALL-E velocity */
  R u.    /* WALL-E acceleration */
  R e.    /* EVE position */
  R f.    /* EVE velocity */
  R g.    /* EVE acceleration */
  R t.    /* time */
End.

Problem.
  (w-e)^2<=1 & v=f -> <{{{ {u:=1;++u:=-1;}^@
                           {g:=1;++g:=-1;}
                           t:=0; {w'=v,v'=u, e'=f,f'=g, t'=1 & t<=1}^@
                       }^@}*@invariant((w-e)^2<=1&v=f)}^@> (w-e)^2<=1
End.

Tactic "Wall-E & Eve: Clever Proof".
  implyR(1) ; dualDirectd(1) ; loop({`(w-e)^2<=1&v=f`}, 1) ; <(
  prop ; done,
  dualDirectb(1) ; composed(1) ; dualDirectd(1) ; choiceb(1) ; andR(1) ; <(
    assignb(1) ; composed(1) ; choiced(1) ; orR(1) ; hideR(2) ; assignd(1) ; composed(1) ; assignd(1) ; dualDirectd(1) ; dC({`v=f`}, 1) ; <(
      dI(1),
      dI(1)
      ),
    assignb(1) ; composed(1) ; choiced(1) ; orR(1) ; hideR(1) ; assignd(1) ; composed(1) ; assignd(1) ; dualDirectd(1) ; dC({`v=f`}, 1) ; <(
      dI(1),
      dI(1)
      )
    ),
  prop ; done
  )
End.
       
Tactic "Wall-E & Eve: Standard Proof".
  implyR(1) ; dualDirectd(1) ; loop({`(w-e)^2<=1&v=f`}, 1) ; <(
  prop ; done,
  dualDirectb(1) ; composed(1) ; dualDirectd(1) ; choiceb(1) ; andR(1) ; <(
    assignb(1) ; composed(1) ; choiced(1) ; orR(1) ; hideR(2) ; assignd(1) ; composed(1) ; assignd(1) ; dualDirectd(1) ; solve(1) ; QE,
    assignb(1) ; composed(1) ; choiced(1) ; orR(1) ; hideR(1) ; assignd(1) ; composed(1) ; assignd(1) ; dualDirectd(1) ; solve(1) ; QE
    ),
  prop ; done
  )
End.
       

End.
       
ArchiveEntry "Goalie in robot soccer".

/**
 * Goalie in robot soccer
 */
ProgramVariables.
  R x.   /* x-coordinate of ball */
  R y.   /* y-coordinate of ball */
  R v.   /* ball's velocity in x-direction */
  R w.   /* ball's velocity in y-direction */
  R g.   /* y-coordinate of goalie lateral in goal */
  R u.   /* velocity of goalie */
End.

Problem.
  (x/v)^2*(u-w)^2<=1 & x<0&v>0&y=g ->
  <{w:=w; ++ w:=-w;}^@;
   {{u:=u; ++ u:=-u;}; {x'=v,y'=w,g'=u}}*> x^2+(y-g)^2<=1
End.

Tactic "Goalie in robot soccer: Proof 1".
  implyR(1) ; composed(1) ; dualDirectd(1) ; choiceb(1) ; andR(1) ; <(
  assignb(1) ; iterated(1) ; orR(1) ; iterated(2.1) ; diamondOr(2) ; orR(2) ; hideR(3) ; composed(2) ; choiced(2) ; orR(2) ; hideR(3) ; assignd(2) ; solve(2) ; existsR({`-x/v`}, 2) ; QE,
  assignb(1) ; iterated(1) ; orR(1) ; iterated(2.1) ; diamondOr(2) ; orR(2) ; hideR(3) ; composed(2) ; choiced(2) ; orR(2) ; hideR(2) ; assignd(2) ; solve(2) ; existsR({`-x/v`}, 2) ; QE
  )
End.

End.
       
