ArchiveEntry "Parachute".

Functions.
  R g() = (9).  /* gravity */
  R p() = (1).  /* parachute drag coefficient */
  R a().        /* skydiver air drag coefficient */
  R m().        /* impact velocity */
  R T().        /* skydiver reaction time */
End.

ProgramVariables.
  R x.    /* skydiver altitude */
  R v.    /* skydiver speed (< 0, so lower is faster) */
  R r.    /* skydiver current drag coefficient (depends on parachute open/closed) */
  R t.    /* time */
End.

Problem.
  g()>0 & p()>a() & a()>0 & T()>0 & m()< -(g()/p())^(1/2) &
  x>=0 & v<0 & v> -(g()/p())^(1/2) & r=a()
->
[ {
    {
      ?(v - g()*T() > -(g()/p())^(1/2) & r = a());
      ++
      r := p();
    }
    t := 0;
    {x'=v, v'=-g()+r*v^2, t'=1 & t<=T() & x>=0 & v<0}
  }*@invariant((x>=0 & v<0) & v>-(g()/p())^(1/2))
](x=0 -> v>=m())
End.

Tactic "Parachute: Proof 1".
  implyR(1) ; loop({`(x>=0&v < 0)&v>-(9/1)^(1/2)`}, 1) ; <(
  QE,
  QE,
  boxAnd(1) ; andR(1) ; <(
    master,
    unfold ; <(
      dC({`v>=old(v)-9*t`}, 1) ; <(
        dW(1) ; QE,
        dI(1)
        ),
      dG({`y`}, {`-1/2*1*(v-(9/1)^(1/2))`}, {`0`}, {`y^2*(v+(9/1)^(1/2))=1`}, 1) ; dI(1.0) ; QE
      )
    )
  )
End.
       

End.
       