ArchiveEntry "1D Saddle Node".

ProgramVariables.
  R x.
  R r.
  R s.
End.
Problem.
r <= 0 -> \exists f (x=f -> [{x'=r+x^2}]x=f)
End.

Tactic "1D Saddle Node: Bifurcation Proof".
implyR(1); 
cut({`r=0|r < 0`}) <(hideL(-1), hideR(1) ; QE); orL(-1) <(
  existsR({`0`}, 1) ; 
  implyR(1) ; 
  dG({`{y'=-x*y}`}, {`y*x=0&y>0`}, 1) ; existsR({`1`}, 1) ; 
  boxAnd(1) ; andR(1) ; <(
    dI(1),
    dG({`{z'=x/2*z}`}, {`z^2*y=1`}, 1) ; existsR({`1`}, 1) ; dI(1)
  )
  ,
  cut({`\exists s r=-s*s`}) ; <(
    existsL(-2) ; existsR({`-s`}, 1) ; implyR(1) ; dG({`{y'=(-(x-s))*y}`}, {`y*(x+s)=0&y>0`}, 1) ; existsR({`1`}, 1) ; boxAnd(1) ; andR(1) ; <(
      dI(1),
      dG({`{z'=(x-s)/2*z}`}, {`z^2*y=1`}, 1) ; existsR({`1`}, 1) ; dI(1)
    ),
    hideR(1) ; QE({`Mathematica`})
  )
)
End.

Tactic "1D Saddle Node: Tree-shaped bifurcation proof"
implyR(1); 
cut({`r=0|r < 0`}) <(
  hideL(-1); orL(-1) <(
    existsR({`0`}, 1) ; 
    implyR(1) ; 
    dG({`{y'=-x*y}`}, {`y*x=0&y>0`}, 1) ; existsR({`1`}, 1) ; 
    boxAnd(1) ; andR(1) ; <(
      dI(1),
      dG({`{z'=x/2*z}`}, {`z^2*y=1`}, 1) ; existsR({`1`}, 1) ; dI(1)
    )
    ,
    cut({`\exists s r=-s*s`}) ; <(
      existsL(-2) ; existsR({`-s`}, 1) ; implyR(1) ; dG({`{y'=(-(x-s))*y}`}, {`y*(x+s)=0&y>0`}, 1) ; existsR({`1`}, 1) ; boxAnd(1) ; andR(1) ; <(
        dI(1),
        dG({`{z'=(x-s)/2*z}`}, {`z^2*y=1`}, 1) ; existsR({`1`}, 1) ; dI(1)
      ),
      hideR(1) ; QE
    )
  )
  ,
  hideR(1) ; QE
)
End.
