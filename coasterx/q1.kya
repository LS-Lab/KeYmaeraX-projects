ArchiveEntry "q1".
Functions.
  R cent.
  R centHi.
  R centLo.
  R cx.
  R cy.
  R dx0.
  R dy0.
  R g.
  R r.
  R tan.
  R tanHi.
  R tanLo.
  R v0.
  R vHi.
  R vLo.
  R x0.
  R x1.
  R y0.
  R y1.
  R yGlobal.
End.

ProgramVariables.
  R x.
  R y.
  R v.
  R dx.
  R dy.
End.

Problem.
g() > 0&
(v>0&v^2+2*y*g()=v0()^2+2*yGlobal()*g())&
((0 >= dy0())&(x0()<=x&x<=x1())&(y1()<=y&y<=y0())->((x-cx())^2 + (y-cy())^2 = r()^2 &(cx()<=x & cy()<=y)&(vLo() <= v^2 & v^2 <= vHi())&(centLo() <= cent() & cent() <= centHi())&(tanLo() <= tan() & tan() <= tanHi())))&
0 >= dy0()&
dx=-(cy()-y)/r()&
dy=(cx()-x)/r()&
x1() > x0()&
y1() < y0()&
cy() <= y1()&
cx() <= x0()&
r() > 0 ->
[{x'=dx*v,
 y'=dy*v,
 v'=-dy*g(),
 dx' =  dy*v/r(),
 dy' =  (-dx*v)/r()
 &(x0()<=x&x<=x1())
 &(y1()<=y&y<=y0())}]
        ( dx=-(cy()-y)/r()
          & dy=(cx()-x)/r()
          & v>0&v^2+2*y*g()=v0()^2+2*yGlobal()*g()
          & y >= cy()
          & ((x-cx())^2 + (y-cy())^2 = r()^2)
          )
End.

Tactic "q1 Proof".
unfold ;
dC({`dx=-(cy()-y)/r()`},1) ;  <(nil, dI(1)) ;
dC({`dy=(cx()-x)/r()`},1) ; <(nil, dI(1)) ;
dC({`v^2=v0()^2+2*yGlobal()*g()-2*y*g()`}, 1) ;  <(nil, dI(1)) ;
dC({`v>0`},1) ; <(nil, ODE(1)) ;
dC({`(x-cx())^2 + (y-cy())^2 = r()^2`},1) ; <(nil, ODE(1)) ;
ODE(1)
End.
       

End.
       