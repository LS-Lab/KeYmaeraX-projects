/* Exported from KeYmaera X v4.9.7 */

Theorem "ACAS X Hybrid Games/Theorem 3.2: Non-maneuvering intruder correctness of implicit safe regions".

Definitions
  Real hp;   /* puck height */
  Real rp;   /* puck radius */
  Real alo;  /* minimal vertical acceleration. Typically g/4 */

  Real wUp = -1;
  Real wLo = 1;

  Real maxI(Real v, Real w, Real vlo) = max(0, w * (vlo - v));

  Bool Limpl(Real r, Real h, Real v, Real w, Real vlo, Real rv) <-> 
    \forall t \forall ro \forall ho (
        (0 <= t & t < maxI(v,w,vlo)/alo & ro = rv * t & ho = (w * alo)/2 * t^2 + v * t)
      | (t >= maxI(v,w,vlo)/alo & ro = rv * t & ho = vlo * t - w * maxI(v,w,vlo)^2/(2*alo))
      -> (abs(r - ro) > rp | w * h < w * ho - hp)
    );
  
  Bool init(Real rv) <-> rp>=0 & hp>0 & rv>=0 & alo>0;

  Bool loopInv(Real r, Real h, Real v, Real w, Real vlo, Real rv) <-> ( (w=wUp | w=wLo) & init(rv) & Limpl(r,h,v,w,vlo,rv) );

  HP motion ::= { {r' = -rv, h' = -v, v' = a & w*v>=w*vlo|w*a>=alo } };
End.

ProgramVariables

  /* horizontal */
  Real r;    /* relative distance in ft; xi - xo */
             /* x = r */
  Real rv;   /* relative speed -(vi - vo) */

  /* vertical */
  Real h;    /* relative altitude in ft */
             /* if negative: the intruder is lower than the ownship */
             /* h := hi - ho */
             /* z = h */
  Real v;    /* vertical velocity of ownship */
  Real vlo;  /* target minimum velocity */
  Real w;    /* velocity direction */
  Real a;    /* ownship climb rate */

End.

Problem
    init(rv)
  & (w=wUp | w=wLo) & Limpl(r,h,v,w,vlo,rv)
  ->
  [{
     { ?true;
       ++
       {
        { w:=wUp; ++ w:=wLo; }
        vlo := *;
        ?Limpl(r,h,v,w,vlo,rv);
       }
     }
     { a := *; }^@
     motion;
   }*@invariant(loopInv(r,h,v,w,vlo,rv))
  ]( abs(r)>rp | abs(h)>hp )
End.

Tactic "ACAS X Hybrid Games: No Intruder Control REFORMULATED v6: Proof"
implyR('R=="init(rv)&(w=wUp()|w=wLo())&Limpl(r,h,v,w,vlo,rv)->[{{?true;++{w:=wUp();++w:=wLo();}vlo:=*;?Limpl(r,h,v,w,vlo,rv);}{a:=*;}^@motion{|^@|};}*](abs(r)>rp()|abs(h)>hp())");
loop("loopInv(r,h,v,w,vlo,rv)", 'R=="[{{?true;++{w:=wUp();++w:=wLo();}vlo:=*;?Limpl(r,h,v,w,vlo,rv);}{a:=*;}^@motion{|^@|};}*](abs(r)>rp()|abs(h)>hp())"); <(
  "Init":
    expand "loopInv";
    propClose,
  "Step":
    composeb('R=="[{?true;++{w:=wUp();++w:=wLo();}vlo:=*;?Limpl(r,h,v,w,vlo,rv);}{a:=*;}^@motion{|^@|};]loopInv(r,h,v,w,vlo,rv)");
    MR("loopInv(r,h,v,w,vlo,rv)", 'R=="[?true;++{w:=wUp();++w:=wLo();}vlo:=*;?Limpl(r,h,v,w,vlo,rv);][{a:=*;}^@motion{|^@|};]loopInv(r,h,v,w,vlo,rv)"); <(
      "Use Q->P":
        chaseAt('R=="[?true;++{w:=wUp();++w:=wLo();}vlo:=*;?Limpl(r,h,v,w,vlo,rv);]loopInv(r,h,v,w,vlo,rv)");
        simplify('R=="(true->loopInv(r,h,v,w,vlo,rv))&\forall vlo (Limpl(r,h,v,wUp(),vlo,rv)->loopInv(r,h,v,wUp(),vlo,rv))&\forall vlo (Limpl(r,h,v,wLo(),vlo,rv)->loopInv(r,h,v,wLo(),vlo,rv))");
        andR('R=="\forall vlo (Limpl(r,h,v,wUp(),vlo,rv)->loopInv(r,h,v,wUp(),vlo,rv))&\forall vlo (Limpl(r,h,v,wLo(),vlo,rv)->loopInv(r,h,v,wLo(),vlo,rv))"); <(
          "\forall vlo (Limpl(r,h,v,wUp(),vlo,rv)->loopInv(r,h,v,wUp(),vlo,rv))":
            allR('R=="\forall vlo (Limpl(r,h,v,wUp(),vlo,rv)->loopInv(r,h,v,wUp(),vlo,rv))");
            implyR('R=="Limpl(r,h,v,wUp(),vlo,rv)->loopInv(r,h,v,wUp(),vlo,rv)");
            expand "loopInv";
            andL('L)*;
            simplify('R=="(wUp()=wUp()|wUp()=wLo())&init(rv)&Limpl(r,h,v,wUp(),vlo,rv)") using "Limpl(r,h,v,wUp(),vlo,rv) :: w=wUp()|w=wLo() :: init(rv) :: (wUp()=wUp()|wUp()=wLo())&init(rv)&Limpl(r,h,v,wUp(),vlo,rv) :: nil";
            closeT,
          "\forall vlo (Limpl(r,h,v,wLo(),vlo,rv)->loopInv(r,h,v,wLo(),vlo,rv))":
            allR('R=="\forall vlo (Limpl(r,h,v,wLo(),vlo,rv)->loopInv(r,h,v,wLo(),vlo,rv))");
            implyR('R=="Limpl(r,h,v,wLo(),vlo,rv)->loopInv(r,h,v,wLo(),vlo,rv)");
            expand "loopInv";
            andL('L)*;
            simplify('R=="(wLo()=wUp()|wLo()=wLo())&init(rv)&Limpl(r,h,v,wLo(),vlo,rv)") using "Limpl(r,h,v,wLo(),vlo,rv) :: w=wUp()|w=wLo() :: init(rv) :: (wLo()=wUp()|wLo()=wLo())&init(rv)&Limpl(r,h,v,wLo(),vlo,rv) :: nil";
            closeT
        ),
      "Show [a]Q":
        composeb('R=="[{a:=*;}^@motion{|^@|};]loopInv(r,h,v,w,vlo,rv)");
        dualDirectb('R=="[{a:=*;}^@][motion{|^@|};]loopInv(r,h,v,w,vlo,rv)");
        randomd('R=="<a:=*;>[motion{|^@|};]loopInv(r,h,v,w,vlo,rv)");
        existsR('R=="\exists a [motion{|^@|};]loopInv(r,h,v,w,vlo,rv)");
        expand "loopInv";
        boxAnd('R=="[motion{|^@|};]((w=wUp()|w=wLo())&init(rv)&Limpl(r,h,v,w,vlo,rv))");
        andR('R=="[motion{|^@|};](w=wUp()|w=wLo())&[motion{|^@|};](init(rv)&Limpl(r,h,v,w,vlo,rv))"); <(
          "[motion{|^@|};](w=wUp()|w=wLo())":
            expand "motion";
            GV('R=="[{r'=-rv,h'=-v,v'=a&w*v>=w*vlo|w*a>=alo()}](w=wUp()|w=wLo())");
            propClose,
          "[motion{|^@|};](init(rv)&Limpl(r,h,v,w,vlo,rv))":
            expand "motion";
            diffUnpackEvolDomain('R=="[{r'=-rv,h'=-v,v'=a&w*v>=w*vlo|w*a>=alo()}](init(rv)&Limpl(r,h,v,w,vlo,rv))");
            solve('R=="[{r'=-rv,h'=-v,v'=a&w*v>=w*vlo|w*a>=alo()}](init(rv)&Limpl(r,h,v,w,vlo,rv))");
            allR('R=="\forall t_ (t_>=0->\forall s_ (0<=s_&s_<=t_->w*(a*s_+v)>=w*vlo|w*a>=alo())->init(rv)&Limpl((-rv)*t_+r,-(a*(t_^2/2)+v*t_)+h,a*t_+v,w,vlo,rv))");
            implyR('R=="t_>=0->\forall s_ (0<=s_&s_<=t_->w*(a*s_+v)>=w*vlo|w*a>=alo())->init(rv)&Limpl((-rv)*t_+r,-(a*(t_^2/2)+v*t_)+h,a*t_+v,w,vlo,rv)");
            implyR('R=="\forall s_ (0<=s_&s_<=t_->w*(a*s_+v)>=w*vlo|w*a>=alo())->init(rv)&Limpl((-rv)*t_+r,-(a*(t_^2/2)+v*t_)+h,a*t_+v,w,vlo,rv)");
            allL("t_", 'L=="\forall s_ (0<=s_&s_<=t_->w*(a*s_+v)>=w*vlo|w*a>=alo())");
            simplify('L=="0<=t_&t_<=t_->w*(a*t_+v)>=w*vlo|w*a>=alo()") using "t_>=0";
            andL('L)*;
            simplify('R=="init(rv)&Limpl((-rv)*t_+r,-(a*(t_^2/2)+v*t_)+h,a*t_+v,w,vlo,rv)") using "init(rv)";
            expand "Limpl";
            allR('R=="\forall t \forall ro \forall ho (0<=t&t < maxI(a*t_+v,w,vlo)/alo()&ro=rv*t&ho=w*alo()/2*t^2+(a*t_+v)*t|t>=maxI(a*t_+v,w,vlo)/alo()&ro=rv*t&ho=vlo*t-w*maxI(a*t_+v,w,vlo)^2/(2*alo())->abs((-rv)*t_+r-ro)>rp()|w*(-(a*(t_^2/2)+v*t_)+h) < w*ho-hp())");
            allR('R=="\forall ro \forall ho (0<=t&t < maxI(a*t_+v,w,vlo)/alo()&ro=rv*t&ho=w*alo()/2*t^2+(a*t_+v)*t|t>=maxI(a*t_+v,w,vlo)/alo()&ro=rv*t&ho=vlo*t-w*maxI(a*t_+v,w,vlo)^2/(2*alo())->abs((-rv)*t_+r-ro)>rp()|w*(-(a*(t_^2/2)+v*t_)+h) < w*ho-hp())");
            allR('R=="\forall ho (0<=t&t < maxI(a*t_+v,w,vlo)/alo()&ro=rv*t&ho=w*alo()/2*t^2+(a*t_+v)*t|t>=maxI(a*t_+v,w,vlo)/alo()&ro=rv*t&ho=vlo*t-w*maxI(a*t_+v,w,vlo)^2/(2*alo())->abs((-rv)*t_+r-ro)>rp()|w*(-(a*(t_^2/2)+v*t_)+h) < w*ho-hp())");
            implyR('R=="0<=t&t < maxI(a*t_+v,w,vlo)/alo()&ro=rv*t&ho=w*alo()/2*t^2+(a*t_+v)*t|t>=maxI(a*t_+v,w,vlo)/alo()&ro=rv*t&ho=vlo*t-w*maxI(a*t_+v,w,vlo)^2/(2*alo())->abs((-rv)*t_+r-ro)>rp()|w*(-(a*(t_^2/2)+v*t_)+h) < w*ho-hp()");
            allL("t+t_", 'L=="\forall t \forall ro \forall ho (0<=t&t < maxI(v,w,vlo)/alo()&ro=rv*t&ho=w*alo()/2*t^2+v*t|t>=maxI(v,w,vlo)/alo()&ro=rv*t&ho=vlo*t-w*maxI(v,w,vlo)^2/(2*alo())->abs(r-ro)>rp()|w*h < w*ho-hp())");
            allL("rv*(t+t_)", 'L=="\forall ro \forall ho (0<=t+t_&t+t_ < maxI(v,w,vlo)/alo()&ro=rv*(t+t_)&ho=w*alo()/2*(t+t_)^2+v*(t+t_)|t+t_>=maxI(v,w,vlo)/alo()&ro=rv*(t+t_)&ho=vlo*(t+t_)-w*maxI(v,w,vlo)^2/(2*alo())->abs(r-ro)>rp()|w*h < w*ho-hp())");
            cut("0<=t+t_&t+t_ < maxI(v,w,vlo)/alo()|t+t_>=maxI(v,w,vlo)/alo()"); <(
              "Use":
                orL('L=="0<=t+t_&t+t_ < maxI(v,w,vlo)/alo()|t+t_>=maxI(v,w,vlo)/alo()"); <(
                  "0<=t+t_&t+t_ < maxI(v,w,vlo)/alo()":
                    allL("w*alo()/2*(t+t_)^2+v*(t+t_)", 'L=="\forall ho (0<=t+t_&t+t_ < maxI(v,w,vlo)/alo()&rv*(t+t_)=rv*(t+t_)&ho=w*alo()/2*(t+t_)^2+v*(t+t_)|t+t_>=maxI(v,w,vlo)/alo()&rv*(t+t_)=rv*(t+t_)&ho=vlo*(t+t_)-w*maxI(v,w,vlo)^2/(2*alo())->abs(r-rv*(t+t_))>rp()|w*h < w*ho-hp())");
                    implyL('L=="0<=t+t_&t+t_ < maxI(v,w,vlo)/alo()&rv*(t+t_)=rv*(t+t_)&w*alo()/2*(t+t_)^2+v*(t+t_)=w*alo()/2*(t+t_)^2+v*(t+t_)|t+t_>=maxI(v,w,vlo)/alo()&rv*(t+t_)=rv*(t+t_)&w*alo()/2*(t+t_)^2+v*(t+t_)=vlo*(t+t_)-w*maxI(v,w,vlo)^2/(2*alo())->abs(r-rv*(t+t_))>rp()|w*h < w*(w*alo()/2*(t+t_)^2+v*(t+t_))-hp()"); <(
                      "0<=t+t_&t+t_ < maxI(v,w,vlo)/alo()&rv*(t+t_)=rv*(t+t_)&w*alo()/2*(t+t_)^2+v*(t+t_)=w*alo()/2*(t+t_)^2+v*(t+t_)|t+t_>=maxI(v,w,vlo)/alo()&rv*(t+t_)=rv*(t+t_)&w*alo()/2*(t+t_)^2+v*(t+t_)=vlo*(t+t_)-w*maxI(v,w,vlo)^2/(2*alo())":
                        orR('R=="0<=t+t_&t+t_ < maxI(v,w,vlo)/alo()&rv*(t+t_)=rv*(t+t_)&w*alo()/2*(t+t_)^2+v*(t+t_)=w*alo()/2*(t+t_)^2+v*(t+t_)|t+t_>=maxI(v,w,vlo)/alo()&rv*(t+t_)=rv*(t+t_)&w*alo()/2*(t+t_)^2+v*(t+t_)=vlo*(t+t_)-w*maxI(v,w,vlo)^2/(2*alo())");
                        QE using "w*v>=w*vlo|w*a>=alo() :: t_>=0 :: w*(a*t_+v)>=w*vlo|w*a>=alo() :: w=wUp()|w=wLo() :: 0<=t&t < maxI(a*t_+v,w,vlo)/alo()&ro=rv*t&ho=w*alo()/2*t^2+(a*t_+v)*t|t>=maxI(a*t_+v,w,vlo)/alo()&ro=rv*t&ho=vlo*t-w*maxI(a*t_+v,w,vlo)^2/(2*alo()) :: 0<=t+t_&t+t_ < maxI(v,w,vlo)/alo() :: 0<=t+t_&t+t_ < maxI(v,w,vlo)/alo()&rv*(t+t_)=rv*(t+t_)&w*alo()/2*(t+t_)^2+v*(t+t_)=w*alo()/2*(t+t_)^2+v*(t+t_) :: nil",
                      "abs(r-rv*(t+t_))>rp()|w*h < w*(w*alo()/2*(t+t_)^2+v*(t+t_))-hp()":
                        prop ; doall(print("QE...") ; QE ; print("...done"))
                    ),
                  "t+t_>=maxI(v,w,vlo)/alo()":
                    orR('R=="abs((-rv)*t_+r-ro)>rp()|w*(-(a*(t_^2/2)+v*t_)+h) < w*ho-hp()");
                    allL("vlo*(t+t_)-w*maxI(v,w,vlo)^2/(2*alo())", 'L=="\forall ho (0<=t+t_&t+t_ < maxI(v,w,vlo)/alo()&rv*(t+t_)=rv*(t+t_)&ho=w*alo()/2*(t+t_)^2+v*(t+t_)|t+t_>=maxI(v,w,vlo)/alo()&rv*(t+t_)=rv*(t+t_)&ho=vlo*(t+t_)-w*maxI(v,w,vlo)^2/(2*alo())->abs(r-rv*(t+t_))>rp()|w*h < w*ho-hp())");
                    implyL('L=="0<=t+t_&t+t_ < maxI(v,w,vlo)/alo()&rv*(t+t_)=rv*(t+t_)&vlo*(t+t_)-w*maxI(v,w,vlo)^2/(2*alo())=w*alo()/2*(t+t_)^2+v*(t+t_)|t+t_>=maxI(v,w,vlo)/alo()&rv*(t+t_)=rv*(t+t_)&vlo*(t+t_)-w*maxI(v,w,vlo)^2/(2*alo())=vlo*(t+t_)-w*maxI(v,w,vlo)^2/(2*alo())->abs(r-rv*(t+t_))>rp()|w*h < w*(vlo*(t+t_)-w*maxI(v,w,vlo)^2/(2*alo()))-hp()"); <(
                      "0<=t+t_&t+t_ < maxI(v,w,vlo)/alo()&rv*(t+t_)=rv*(t+t_)&vlo*(t+t_)-w*maxI(v,w,vlo)^2/(2*alo())=w*alo()/2*(t+t_)^2+v*(t+t_)|t+t_>=maxI(v,w,vlo)/alo()&rv*(t+t_)=rv*(t+t_)&vlo*(t+t_)-w*maxI(v,w,vlo)^2/(2*alo())=vlo*(t+t_)-w*maxI(v,w,vlo)^2/(2*alo())":
                        orR('R=="0<=t+t_&t+t_ < maxI(v,w,vlo)/alo()&rv*(t+t_)=rv*(t+t_)&vlo*(t+t_)-w*maxI(v,w,vlo)^2/(2*alo())=w*alo()/2*(t+t_)^2+v*(t+t_)|t+t_>=maxI(v,w,vlo)/alo()&rv*(t+t_)=rv*(t+t_)&vlo*(t+t_)-w*maxI(v,w,vlo)^2/(2*alo())=vlo*(t+t_)-w*maxI(v,w,vlo)^2/(2*alo())");
                        QE using "t_>=0 :: 0<=t&t < maxI(a*t_+v,w,vlo)/alo()&ro=rv*t&ho=w*alo()/2*t^2+(a*t_+v)*t|t>=maxI(a*t_+v,w,vlo)/alo()&ro=rv*t&ho=vlo*t-w*maxI(a*t_+v,w,vlo)^2/(2*alo()) :: t+t_>=maxI(v,w,vlo)/alo() :: t+t_>=maxI(v,w,vlo)/alo()&rv*(t+t_)=rv*(t+t_)&vlo*(t+t_)-w*maxI(v,w,vlo)^2/(2*alo())=vlo*(t+t_)-w*maxI(v,w,vlo)^2/(2*alo()) :: nil",
                      "abs(r-rv*(t+t_))>rp()|w*h < w*(vlo*(t+t_)-w*maxI(v,w,vlo)^2/(2*alo()))-hp()":
                        prop ; doall(print("QE...") ; QE ; print("...done"))
                    )
                ),
              "Show":
                QE using "t_>=0 :: w=wUp()|w=wLo() :: init(rv) :: 0<=t&t < maxI(a*t_+v,w,vlo)/alo()&ro=rv*t&ho=w*alo()/2*t^2+(a*t_+v)*t|t>=maxI(a*t_+v,w,vlo)/alo()&ro=rv*t&ho=vlo*t-w*maxI(a*t_+v,w,vlo)^2/(2*alo()) :: 0<=t+t_&t+t_ < maxI(v,w,vlo)/alo()|t+t_>=maxI(v,w,vlo)/alo() :: nil"
            )
        )
    ),
  "Post":
    expandAllDefs;
    andL('L)*;
    allL("0", 'L=="\forall t \forall ro \forall ho (0<=t&t < max(0,w*(vlo-v))/alo()&ro=rv*t&ho=w*alo()/2*t^2+v*t|t>=max(0,w*(vlo-v))/alo()&ro=rv*t&ho=vlo*t-w*max(0,w*(vlo-v))^2/(2*alo())->abs(r-ro)>rp()|w*h < w*ho-hp())");
    allL("0", 'L=="\forall ro \forall ho (0<=0&0 < max(0,w*(vlo-v))/alo()&ro=rv*0&ho=w*alo()/2*0^2+v*0|0>=max(0,w*(vlo-v))/alo()&ro=rv*0&ho=vlo*0-w*max(0,w*(vlo-v))^2/(2*alo())->abs(r-ro)>rp()|w*h < w*ho-hp())");
    allL("0", 'L=="\forall ho (0<=0&0 < max(0,w*(vlo-v))/alo()&0=rv*0&ho=w*alo()/2*0^2+v*0|0>=max(0,w*(vlo-v))/alo()&0=rv*0&ho=vlo*0-w*max(0,w*(vlo-v))^2/(2*alo())->abs(r-0)>rp()|w*h < w*ho-hp())");
    QE
)
End.

End.
