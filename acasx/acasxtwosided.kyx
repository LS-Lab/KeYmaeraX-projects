SharedDefinitions.
  R hp.   /* puck height */
  R rp.   /* puck radius */
  R a.    /* minimal vertical acceleration. Typically g/4 */

  R aM.   /* maximum vertical acceleration */

  /* velocity bound 1 = lower, -1 = upper */
  R wUp() = (-1).
  R wLo() = (1).

  R abs(R).
  R min(R, R).
  R max(R, R).

  R maxI(R w, R dhf, R dhd) = ( max(0, w * (dhf - dhd)) ).

  /* Remark: under the condition w*dhd<=w*dhfM, we always have dhfM = (dhd+w*maxIM) */
  B CM(R w, R dhfM, R dhd, R r, R h) <-> (
    \forall t \forall ro \forall ho (
        (0 <= t & t < maxI(w,dhfM,dhd)/aM() & ro = rv * t & ho = (w * aM())/2 * t^2 + dhd * t)
      | (t >= maxI(w,dhfM,dhd)/aM() & ro = rv * t & ho = (dhd+w*maxI(w,dhfM,dhd)) * t - w * maxI(w,dhfM,dhd)^2/(2*aM()))
      -> (abs(r - ro) > rp() | w * h > w * ho + hp())
    )
  ).

  /* todo adapt names to paper r=r, h=h, dhd=v, w=w, dhf=vlo */
  B C(R w, R dhf, R dhd, R r, R h) <-> (
    \forall t \forall ro \forall ho (
        (0 <= t & t < maxI(w,dhf,dhd)/a() & ro = rv * t & ho = (w * a())/2 * t^2 + dhd * t)
      | (t >= maxI(w,dhf,dhd)/a() & ro = rv * t & ho = dhf * t - w * maxI(w,dhf,dhd)^2/(2*a()))
      -> (abs(r - ro) > rp() | w * h < w * ho - hp())
    )
  ).

  /* todo refactoring idea: might be possible to define C and CM from same base def. */
  /* B C(R w, R dhf, R dhd, R r, R h) <-> ( CBase(w, dhf, dhd, r, h, a(), -hp()) ). */
  /* B CM(R w, R dhfM, R dhd, R r, R h) <-> ( CBase(w, dhfM, dhd, r, h, aM(), hp()) ). */
  /* B CBase(R w, R dhf, R dhd, R r, R h, R a2, R hp2) <-> (
    \forall t \forall ro \forall ho (
        (0 <= t & t < maxI(w,dhf,dhd)/a2 & ro = rv * t & ho = (w * a2)/2 * t^2 + dhd * t)
      | (t >= maxI(w,dhf,dhd)/a2 & ro = rv * t & ho = dhf * t - w * maxI(w,dhf,dhd)^2/(2*a2))
      -> (abs(r - ro) > rp() | w * h < w * ho + hp2)
    )
  ).*/

  B init(R a) <-> ( hp()>0 & rp()>=0 & rv>=0 & a>0 ).

  B loopInv() <-> ( (w=wUp() | w=wLo()) & C(w,dhf,dhd,r,h) ).

  B advisory(R w, R dhf, R dhd, R ao) <-> ( w*dhd>=w*dhf|w*ao>=a() ).

  B advisoryUp(R w, R dhfM, R dhd, R ao) <-> ( (w*dhd<=w*dhfM & w*ao<=aM|w*ao<=0) ).

  HP motion ::= { {r' = -rv, h' = -dhd, dhd' = ao & advisory(w,dhf,dhd,ao) } }.
End.

Lemma "Thm 3: Safe Implicit Low".

ProgramVariables.
  R w.
  R dhf.
  R dhd.
  R ao.
  R h.
  R rv.
  R r.
End.

Problem.
\forall t2 (
advisory(w,dhf,dhd,ao)
  & (w=wUp()|w=wLo())
  & C(w,dhf,dhd,r,h)
  & init(a())
  & advisory(w,dhf,ao*t2+dhd,ao)
  & t2>=0
  -> C(w, dhf, ao*t2+dhd, (-rv)*t2+r, -(ao/2*t2^2+dhd*t2)+h)
)
End.

Tactic "Proof Thm3: Safe Implicit Low".
allR('R);
implyR('R);
(andL('L)*);
print({`Before skolem`}); (allR('R)*); print({`After skolem`});
implyR('R); orR('R);
/* here we'd want to access previously introduced skolem symbol and
   time introduced by diffSolution;goal 90 */
allL(/*t*/ {`t2 + t`},'L);                                                   /* t_22+t_23: t2 == t_22, t == t_23 */
allL(/*ro*/ {`rv*(t2 + t)`},'L);                                             /* rv*(t_22+t_23) */
abbrv({`maxI(w,dhf,dhd)`}, {`maxI`});
print({`Before CUT`});
cut({`0<=t+t2&t+t2<maxI/a()|t+t2>=maxI/a()`}); <(
  /*use*/
  print({`Use Cut`});
  orL('L=={`0<=t+t2&t+t2 < maxI/a()|t+t2>=maxI/a()`}); <(
    print({`Goal 110`});
    allL(/*ho*/ {`w*a/2*(t+t2)^2 + dhd*(t+t2)`},'L);
    print({`instantiate ho 1 Lo`});
    implyL('L=={`0<=t2+t&t2+t < maxI/a&rv*(t2+t)=rv*(t2+t)&w*a/2*(t+t2)^2+dhd*(t+t2)=w*a/2*(t2+t)^2+dhd*(t2+t)|t2+t>=maxI/a&rv*(t2+t)=rv*(t2+t)&w*a/2*(t+t2)^2+dhd*(t+t2)=dhf*(t2+t)-w*maxI^2/(2*a)->abs(r-rv*(t2+t))>rp|w*h < w*(w*a/2*(t+t2)^2+dhd*(t+t2))-hp`}); <(
      print({`left of -> 1 Lo`});
      orR('R);
      hideR('R=={`t2+t>=maxI/a&rv*(t2+t)=rv*(t2+t)&w*a/2*(t+t2)^2+dhd*(t+t2)=dhf*(t2+t)-w*maxI^2/(2*a)`});
      hideR('R=={`abs(((-rv)*t2+r)-ro)>rp`});
      hideR('R=={`w*(-(ao/2*t2^2+dhd*t2)+h)<w*ho-hp`});
      hideL('L=={`maxI=maxI(w,dhf,dhd)`});
      QE;
      done
      ,
      print({`right of -> 1 Lo`});
      prop; doall(QE);
      /* atomicQE; */
      done
    )
    ,
    print({`final time in straight Lo`});
    allL(/*ho*/ {`dhf*(t+t2) - w*maxI^2/(2*a)`},'L);
    print({`instantiate ho 2 Lo`});
    implyL('L=={`0<=t2+t&t2+t < maxI/a&rv*(t2+t)=rv*(t2+t)&dhf*(t+t2)-w*maxI^2/(2*a)=w*a/2*(t2+t)^2+dhd*(t2+t)|t2+t>=maxI/a&rv*(t2+t)=rv*(t2+t)&dhf*(t+t2)-w*maxI^2/(2*a)=dhf*(t2+t)-w*maxI^2/(2*a)->abs(r-rv*(t2+t))>rp|w*h < w*(dhf*(t+t2)-w*maxI^2/(2*a))-hp`}); <(
      print({`left of -> 2 Lo`});
      orR('R);
      hideR('R=={`0<=t2+t&t2+t < maxI/a&rv*(t2+t)=rv*(t2+t)&dhf*(t+t2)-w*maxI^2/(2*a)=w*a/2*(t2+t)^2+dhd*(t2+t)`});
      hideR('R=={`abs(((-rv)*t2+r)-ro)>rp`});
      hideR('R=={`w*(-(ao/2*t2^2+dhd*t2)+h)<w*ho-hp`});
      hideL('L=={`maxI=maxI(w,dhf,dhd)`});
      QE;
      done
      ,
      print({`right of -> 2 Lo`});
      prop; doall(QE);
      /* atomicQE; */
      done
    )
  )
  ,
  /*show */
  print({`Show Cut`});
  hideL('L=={`maxI=maxI(w,dhf,dhd)`});
  hideL('L=={`\forall ho (0<=t2+t&t2+t < maxI/a&rv*(t2+t)=rv*(t2+t)&ho=w*a/2*(t2+t)^2+dhd*(t2+t)|t2+t>=maxI/a&rv*(t2+t)=rv*(t2+t)&ho=dhf*(t2+t)-w*maxI^2/(2*a())->abs(r-rv*(t2+t))>rp|w*h < w*ho-hp)`});
  hideR('R=={`abs(((-rv)*t2+r)-ro)>rp`});
  hideR('R=={`w*(-(ao/2*t2^2+dhd*t2)+h)<w*ho-hp`});
  print({`Show Cut 2`});
  orR('R);
  /*orL('L=={`0<=t&t<max((0,w*(dhf-(ao*t2+dhd))))/a&ro=rv*t&ho=w*a()/2*t^2+(ao*t2+dhd)*t|t>=max((0,w*(dhf-(ao*t2+dhd))))/a()&ro=rv*t&ho=dhf*t-w*max((0,w*(dhf-(ao*t2+dhd))))^2/(2*a())`});*/
  print({`End CutShowLbl`});
  prop; doall(QE);
  /* atomicQE; */
  done;
  print({`Show Cut Done`})
)
End.

End.

Lemma "Thm 3: Safe Implicit Up".

ProgramVariables.
  R w.
  R dhfM.
  R dhd.
  R ao.
  R h.
  R rv.
  R r.
End.

Problem.
\forall t2 (
advisoryUp(w,dhfM,dhd,ao)
  & (w=wUp()|w=wLo())
  & CM(w,dhfM,dhd,r,h)
  & init(aM())
  & advisoryUp(w,dhfM,ao*t2+dhd,ao)
  & t2>=0
  -> CM(w, dhfM, ao*t2+dhd, (-rv)*t2+r, -(ao/2*t2^2+dhd*t2)+h)
)
End.

Tactic "Proof Thm 3: Safe Implicit Up".
allR('R);
implyR('R);
(andL('L)*);
print({`Before skolem Up`}); (allR('R)*); print({`After skolem Up`});
implyR('R); orR('R);
allL(/*t*/ {`t2 + t`},'L);
allL(/*ro*/ {`rv*(t2 + t)`},'L);
abbrv({`maxI(w,dhfM,dhd)`},{`maxIM`});
print({`Before CUT`});
cut({`0<=t2+t&t2+t<maxIM/aM|t2+t>=maxIM/aM`}); <(
      /*cutUse, */ print({`Use Cut`});
        orL('L=={`0<=t2+t&t2+t<maxIM/aM|t2+t>=maxIM/aM`});<(
        print({`final time in parabola`});
          allL(/*ho*/ {`w*aM/2*(t2+t)^2+dhd*(t2+t)`}, 'L);
          print({`instantiate ho 1 Up`});
          implyL('L=={`0<=t2+t&t2+t < maxIM/aM&rv*(t2+t)=rv*(t2+t)&w*aM/2*(t2+t)^2+dhd*(t2+t)=w*aM/2*(t2+t)^2+dhd*(t2+t)|t2+t>=maxIM/aM&rv*(t2+t)=rv*(t2+t)&w*aM/2*(t2+t)^2+dhd*(t2+t)=(dhd+w*maxIM)*(t2+t)-w*maxIM^2/(2*aM)->abs(r-rv*(t2+t))>rp|w*h>w*(w*aM/2*(t2+t)^2+dhd*(t2+t))+hp`}); <(
          print({`left of -> 1 Up`}); orR('R);
            hideR('R=={`t2+t>=maxIM/aM&rv*(t2+t)=rv*(t2+t)&w*aM/2*(t2+t)^2+dhd*(t2+t)=(dhd+w*maxIM)*(t2+t)-w*maxIM^2/(2*aM)`});
            hideR('R=={`abs(((-rv)*t2+r)-ro)>rp`}); hideR('R=={`w*(-(ao/2*t2^2+dhd*t2)+h)>w*ho+hp`});
            hideL('L=={`maxIM=max((0,w*(dhfM-dhd)))`}); QE; done
          ,
          print({`right of -> 1 Up`}); prop; doall(QE); done; print({`Done right of -> 1 Up`})
        )
        ,
        print({`final time in straight Up`});
          allL(/*ho*/ {`(dhd+w*maxIM)*(t2+t)-w*maxIM^2/(2*aM)`}, 'L);
          print({`instantiate ho 2 Lo`});
          implyL('L=={`0<=t2+t&t2+t < maxIM/aM&rv*(t2+t)=rv*(t2+t)&(dhd+w*maxIM)*(t2+t)-w*maxIM^2/(2*aM)=w*aM/2*(t2+t)^2+dhd*(t2+t)|t2+t>=maxIM/aM&rv*(t2+t)=rv*(t2+t)&(dhd+w*maxIM)*(t2+t)-w*maxIM^2/(2*aM)=(dhd+w*maxIM)*(t2+t)-w*maxIM^2/(2*aM)->abs(r-rv*(t2+t))>rp|w*h>w*((dhd+w*maxIM)*(t2+t)-w*maxIM^2/(2*aM))+hp`})
         ;<(
          print({`left of -> 2 Up`}); orR('R);
            hideR('R=={`0<=t2+t&t2+t < maxIM/aM&rv*(t2+t)=rv*(t2+t)&(dhd+w*maxIM)*(t2+t)-w*maxIM^2/(2*aM)=w*aM/2*(t2+t)^2+dhd*(t2+t)`});
            hideR('R=={`abs(((-rv)*t2+r)-ro)>rp`}); hideR('R=={`w*(-(ao/2*t2^2+dhd*t2)+h)>w*ho+hp`});
            hideL('L=={`maxIM=max((0,w*(dhfM-dhd)))`}); QE; done
          ,
          print({`right of -> 2 Up`}); prop; doall(QE); done; print({`Done right of -> 2 Up`})
        )
      )
      ,
      /*show*/
      print({`Show Cut`});
      hideL('L=={`maxIM=maxI(w,dhfM,dhd)`});
      hideL('L=={`\forall ho (0<=t2+t&t2+t < maxIM/aM&rv*(t2+t)=rv*(t2+t)&ho=w*aM/2*(t2+t)^2+dhd*(t2+t)|t2+t>=maxIM/aM&rv*(t2+t)=rv*(t2+t)&ho=(dhd+w*maxIM)*(t2+t)-w*maxIM^2/(2*aM)->abs(r-rv*(t2+t))>rp|w*h>w*ho+hp)`});
      hideR('R=={`abs(((-rv)*t2+r)-ro)>rp`}); hideR('R=={`w*(-(ao/2*t2^2+dhd*t2)+h)>w*ho+hp`});
      print({`Show Cut 2`}); orR('R);
      /*orL('L, s"0<=t&t<max((0,w*(dhfM-$dhd)))/aM&ro=rv*t&ho=w*aM/2*t^2+$dhd*t|t>=max((0,w*(dhfM-$dhd)))/aM&ro=rv*t&ho=($dhd+w*max((0,w*(dhfM-$dhd))))*t-w*max((0,w*(dhfM-$dhd)))^2/(2*aM)".asFormula)*/
      prop ; doall(QE); print({`Done Show Cut`})
    )
End.

End.