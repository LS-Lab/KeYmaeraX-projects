SharedDefinitions.
  R hp.   /* puck height */
  R rp.   /* puck radius */
  R a.    /* minimal vertical acceleration. Typically g/4 */

  R aM.   /* maximum vertical acceleration */

  /* velocity bound 1 = lower, -1 = upper */
  R wUp() = (-1).
  R wLo() = (1).

  R abs(R).
  R min(R, R).
  R max(R, R).

  R maxI(R w, R dhf, R dhd) = ( max(0, w * (dhf - dhd)) ).

  /* Remark: under the condition w*dhd<=w*dhfM, we always have dhfM = (dhd+w*maxIM) */
  B CM(R w, R dhfM, R dhd, R r, R h) <-> (
    \forall t \forall ro \forall ho (
        (0 <= t & t < maxI(w,dhfM,dhd)/aM() & ro = rv * t & ho = (w * aM())/2 * t^2 + dhd * t)
      | (t >= maxI(w,dhfM,dhd)/aM() & ro = rv * t & ho = (dhd+w*maxI(w,dhfM,dhd)) * t - w * maxI(w,dhfM,dhd)^2/(2*aM()))
      -> (abs(r - ro) > rp() | w * h > w * ho + hp())
    )
  ).

  /* todo adapt names to paper r=r, h=h, dhd=v, w=w, dhf=vlo */
  B C(R w, R dhf, R dhd, R r, R h) <-> (
    \forall t \forall ro \forall ho (
        (0 <= t & t < maxI(w,dhf,dhd)/a() & ro = rv * t & ho = (w * a())/2 * t^2 + dhd * t)
      | (t >= maxI(w,dhf,dhd)/a() & ro = rv * t & ho = dhf * t - w * maxI(w,dhf,dhd)^2/(2*a()))
      -> (abs(r - ro) > rp() | w * h < w * ho - hp())
    )
  ).

  /* todo refactoring idea: might be possible to define C and CM from same base def. */
  /* B C(R w, R dhf, R dhd, R r, R h) <-> ( CBase(w, dhf, dhd, r, h, a(), -hp()) ). */
  /* B CM(R w, R dhfM, R dhd, R r, R h) <-> ( CBase(w, dhfM, dhd, r, h, aM(), hp()) ). */
  /* B CBase(R w, R dhf, R dhd, R r, R h, R a2, R hp2) <-> (
    \forall t \forall ro \forall ho (
        (0 <= t & t < maxI(w,dhf,dhd)/a2 & ro = rv * t & ho = (w * a2)/2 * t^2 + dhd * t)
      | (t >= maxI(w,dhf,dhd)/a2 & ro = rv * t & ho = dhf * t - w * maxI(w,dhf,dhd)^2/(2*a2))
      -> (abs(r - ro) > rp() | w * h < w * ho + hp2)
    )
  ).*/

  B initBounds() <-> ( hp()>0 & rp()>=0 & rv>=0 ).

  B init(R a) <-> ( initBounds() & a>0 ).

  B initAll() <-> ( initBounds() & a()>0 & aM()>0 ).

  B loopInv(R w, R dhf, R dhfM, R dhd, R r, R h) <-> (
    ((w=wUp() | w=wLo()) & (C(w,dhf,dhd,r,h) | CM(w,dhfM,dhd,r,h))) & initAll()
  ).

  B advisory(R w, R dhf, R dhd, R ao) <-> ( w*dhd>=w*dhf|w*ao>=a() ).

  B advisoryUp(R w, R dhfM, R dhd, R ao) <-> ( (w*dhd<=w*dhfM & w*ao<=aM|w*ao<=0) ).

  B evolutionDomain(R w, R dhf, R dhfM, R dhd, R ao) <-> ( advisory(w,dhf,dhd,ao) & advisoryUp(w,dhfM,dhd,ao) ).

  HP motion ::= { {r' = -rv, h' = -dhd, dhd' = ao &
                             evolutionDomain(w,dhf,dhfM,dhd,ao) }
  }.
End.

Lemma "Thm 3: Safe Implicit Low".

ProgramVariables.
  R w.
  R dhf.
  R dhd.
  R ao.
  R h.
  R rv.
  R r.
  R t_.
End.

Problem.
advisory(w,dhf,dhd,ao)
  & (w=wUp()|w=wLo())
  & C(w,dhf,dhd,r,h)
  & init(a())
  & advisory(w,dhf,ao*t_+dhd,ao)
  & t_>=0
  -> C(w, dhf, ao*t_+dhd, (-rv)*t_+r, -(ao/2*t_^2+dhd*t_)+h)
End.

Tactic "Proof Thm3: Safe Implicit Low".
implyR('R);
(andL('L)*);
print({`Before skolem`}); (allR('R)*); print({`After skolem`});
implyR('R); orR('R);
/* here we'd want to access previously introduced skolem symbol and
   time introduced by diffSolution;goal 90 */
allL(/*t*/ {`t_ + t`},'L);                                                   /* t_22+t_23: t_ == t_22, t == t_23 */
allL(/*ro*/ {`rv*(t_ + t)`},'L);                                             /* rv*(t_22+t_23) */
abbrv({`maxI(w,dhf,dhd)`}, {`maxI`});
print({`Before CUT`});
cut({`0<=t+t_&t+t_<maxI/a()|t+t_>=maxI/a()`}); <(
  /*use*/
  print({`Use Cut`});
  orL('L=={`0<=t+t_&t+t_ < maxI/a()|t+t_>=maxI/a()`}); <(
    print({`Goal 110`});
    allL(/*ho*/ {`w*a/2*(t+t_)^2 + dhd*(t+t_)`},'L);
    print({`instantiate ho 1 Lo`});
    implyL('L=={`0<=t_+t&t_+t < maxI/a&rv*(t_+t)=rv*(t_+t)&w*a/2*(t+t_)^2+dhd*(t+t_)=w*a/2*(t_+t)^2+dhd*(t_+t)|t_+t>=maxI/a&rv*(t_+t)=rv*(t_+t)&w*a/2*(t+t_)^2+dhd*(t+t_)=dhf*(t_+t)-w*maxI^2/(2*a)->abs(r-rv*(t_+t))>rp|w*h < w*(w*a/2*(t+t_)^2+dhd*(t+t_))-hp`}); <(
      print({`left of -> 1 Lo`});
      orR('R);
      hideR('R=={`t_+t>=maxI/a&rv*(t_+t)=rv*(t_+t)&w*a/2*(t+t_)^2+dhd*(t+t_)=dhf*(t_+t)-w*maxI^2/(2*a)`});
      hideR('R=={`abs(((-rv)*t_+r)-ro)>rp`});
      hideR('R=={`w*(-(ao/2*t_^2+dhd*t_)+h)<w*ho-hp`});
      hideL('L=={`maxI=maxI(w,dhf,dhd)`});
      QE;
      done
      ,
      print({`right of -> 1 Lo`});
      prop; doall(QE);
      /* atomicQE; */
      done
    )
    ,
    print({`final time in straight Lo`});
    allL(/*ho*/ {`dhf*(t+t_) - w*maxI^2/(2*a)`},'L);
    print({`instantiate ho 2 Lo`});
    implyL('L=={`0<=t_+t&t_+t < maxI/a&rv*(t_+t)=rv*(t_+t)&dhf*(t+t_)-w*maxI^2/(2*a)=w*a/2*(t_+t)^2+dhd*(t_+t)|t_+t>=maxI/a&rv*(t_+t)=rv*(t_+t)&dhf*(t+t_)-w*maxI^2/(2*a)=dhf*(t_+t)-w*maxI^2/(2*a)->abs(r-rv*(t_+t))>rp|w*h < w*(dhf*(t+t_)-w*maxI^2/(2*a))-hp`}); <(
      print({`left of -> 2 Lo`});
      orR('R);
      hideR('R=={`0<=t_+t&t_+t < maxI/a&rv*(t_+t)=rv*(t_+t)&dhf*(t+t_)-w*maxI^2/(2*a)=w*a/2*(t_+t)^2+dhd*(t_+t)`});
      hideR('R=={`abs(((-rv)*t_+r)-ro)>rp`});
      hideR('R=={`w*(-(ao/2*t_^2+dhd*t_)+h)<w*ho-hp`});
      hideL('L=={`maxI=maxI(w,dhf,dhd)`});
      QE;
      done
      ,
      print({`right of -> 2 Lo`});
      prop; doall(QE);
      /* atomicQE; */
      done
    )
  )
  ,
  /*show */
  print({`Show Cut`});
  hideL('L=={`maxI=maxI(w,dhf,dhd)`});
  hideL('L=={`\forall ho (0<=t_+t&t_+t < maxI/a&rv*(t_+t)=rv*(t_+t)&ho=w*a/2*(t_+t)^2+dhd*(t_+t)|t_+t>=maxI/a&rv*(t_+t)=rv*(t_+t)&ho=dhf*(t_+t)-w*maxI^2/(2*a())->abs(r-rv*(t_+t))>rp|w*h < w*ho-hp)`});
  hideR('R=={`abs(((-rv)*t_+r)-ro)>rp`});
  hideR('R=={`w*(-(ao/2*t_^2+dhd*t_)+h)<w*ho-hp`});
  print({`Show Cut 2`});
  orR('R);
  /*orL('L=={`0<=t&t<max((0,w*(dhf-(ao*t_+dhd))))/a&ro=rv*t&ho=w*a()/2*t^2+(ao*t_+dhd)*t|t>=max((0,w*(dhf-(ao*t_+dhd))))/a()&ro=rv*t&ho=dhf*t-w*max((0,w*(dhf-(ao*t_+dhd))))^2/(2*a())`});*/
  print({`End CutShowLbl`});
  prop; doall(QE);
  /* atomicQE; */
  done;
  print({`Show Cut Done`})
)
End.

End.

Lemma "Thm 3: Safe Implicit Up".

ProgramVariables.
  R w.
  R dhfM.
  R dhd.
  R ao.
  R h.
  R rv.
  R r.
  R t_.
End.

Problem.
advisoryUp(w,dhfM,dhd,ao)
  & (w=wUp()|w=wLo())
  & CM(w,dhfM,dhd,r,h)
  & init(aM())
  & advisoryUp(w,dhfM,ao*t_+dhd,ao)
  & t_>=0
  -> CM(w, dhfM, ao*t_+dhd, (-rv)*t_+r, -(ao/2*t_^2+dhd*t_)+h)
End.

Tactic "Proof Thm 3: Safe Implicit Up".
implyR('R);
(andL('L)*);
print({`Before skolem Up`}); (allR('R)*); print({`After skolem Up`});
implyR('R); orR('R);
allL(/*t*/ {`t_ + t`},'L);
allL(/*ro*/ {`rv*(t_ + t)`},'L);
abbrv({`maxI(w,dhfM,dhd)`},{`maxIM`});
print({`Before CUT`});
cut({`0<=t_+t&t_+t<maxIM/aM|t_+t>=maxIM/aM`}); <(
      /*cutUse, */ print({`Use Cut`});
        orL('L=={`0<=t_+t&t_+t<maxIM/aM|t_+t>=maxIM/aM`});<(
        print({`final time in parabola`});
          allL(/*ho*/ {`w*aM/2*(t_+t)^2+dhd*(t_+t)`}, 'L);
          print({`instantiate ho 1 Up`});
          implyL('L=={`0<=t_+t&t_+t < maxIM/aM&rv*(t_+t)=rv*(t_+t)&w*aM/2*(t_+t)^2+dhd*(t_+t)=w*aM/2*(t_+t)^2+dhd*(t_+t)|t_+t>=maxIM/aM&rv*(t_+t)=rv*(t_+t)&w*aM/2*(t_+t)^2+dhd*(t_+t)=(dhd+w*maxIM)*(t_+t)-w*maxIM^2/(2*aM)->abs(r-rv*(t_+t))>rp|w*h>w*(w*aM/2*(t_+t)^2+dhd*(t_+t))+hp`}); <(
          print({`left of -> 1 Up`}); orR('R);
            hideR('R=={`t_+t>=maxIM/aM&rv*(t_+t)=rv*(t_+t)&w*aM/2*(t_+t)^2+dhd*(t_+t)=(dhd+w*maxIM)*(t_+t)-w*maxIM^2/(2*aM)`});
            hideR('R=={`abs(((-rv)*t_+r)-ro)>rp`}); hideR('R=={`w*(-(ao/2*t_^2+dhd*t_)+h)>w*ho+hp`});
            hideL('L=={`maxIM=max((0,w*(dhfM-dhd)))`}); QE; done
          ,
          print({`right of -> 1 Up`}); prop; doall(QE); done; print({`Done right of -> 1 Up`})
        )
        ,
        print({`final time in straight Up`});
          allL(/*ho*/ {`(dhd+w*maxIM)*(t_+t)-w*maxIM^2/(2*aM)`}, 'L);
          print({`instantiate ho 2 Lo`});
          implyL('L=={`0<=t_+t&t_+t < maxIM/aM&rv*(t_+t)=rv*(t_+t)&(dhd+w*maxIM)*(t_+t)-w*maxIM^2/(2*aM)=w*aM/2*(t_+t)^2+dhd*(t_+t)|t_+t>=maxIM/aM&rv*(t_+t)=rv*(t_+t)&(dhd+w*maxIM)*(t_+t)-w*maxIM^2/(2*aM)=(dhd+w*maxIM)*(t_+t)-w*maxIM^2/(2*aM)->abs(r-rv*(t_+t))>rp|w*h>w*((dhd+w*maxIM)*(t_+t)-w*maxIM^2/(2*aM))+hp`})
         ;<(
          print({`left of -> 2 Up`}); orR('R);
            hideR('R=={`0<=t_+t&t_+t < maxIM/aM&rv*(t_+t)=rv*(t_+t)&(dhd+w*maxIM)*(t_+t)-w*maxIM^2/(2*aM)=w*aM/2*(t_+t)^2+dhd*(t_+t)`});
            hideR('R=={`abs(((-rv)*t_+r)-ro)>rp`}); hideR('R=={`w*(-(ao/2*t_^2+dhd*t_)+h)>w*ho+hp`});
            hideL('L=={`maxIM=max((0,w*(dhfM-dhd)))`}); QE; done
          ,
          print({`right of -> 2 Up`}); prop; doall(QE); done; print({`Done right of -> 2 Up`})
        )
      )
      ,
      /*show*/
      print({`Show Cut`});
      hideL('L=={`maxIM=maxI(w,dhfM,dhd)`});
      hideL('L=={`\forall ho (0<=t_+t&t_+t < maxIM/aM&rv*(t_+t)=rv*(t_+t)&ho=w*aM/2*(t_+t)^2+dhd*(t_+t)|t_+t>=maxIM/aM&rv*(t_+t)=rv*(t_+t)&ho=(dhd+w*maxIM)*(t_+t)-w*maxIM^2/(2*aM)->abs(r-rv*(t_+t))>rp|w*h>w*ho+hp)`});
      hideR('R=={`abs(((-rv)*t_+r)-ro)>rp`}); hideR('R=={`w*(-(ao/2*t_^2+dhd*t_)+h)>w*ho+hp`});
      print({`Show Cut 2`}); orR('R);
      /*orL('L, s"0<=t&t<max((0,w*(dhfM-$dhd)))/aM&ro=rv*t&ho=w*aM/2*t^2+$dhd*t|t>=max((0,w*(dhfM-$dhd)))/aM&ro=rv*t&ho=($dhd+w*max((0,w*(dhfM-$dhd))))*t-w*max((0,w*(dhfM-$dhd)))^2/(2*aM)".asFormula)*/
      prop ; doall(QE); print({`Done Show Cut`})
    )
End.

End.

Lemma "Thm 3: Use Case Low".

ProgramVariables.
  R w.
  R dhf.
  R dhfM.
  R dhd.
  R ao.
  R h.
  R rv.
  R r.
End.

Problem.
loopInv(w, dhf, dhfM, dhd, r, h) -> (abs(r)>rp|abs(h)>hp)
End.

Tactic "Proof Thm 3: Use Case Low".

implyR('R);
(andL('L)*);
print({`before orL`});
orL('L=={`C(w,dhf,dhd,r,h) | CM(w,dhfM,dhd,r,h)`}); <(
  print({`before inst 0 lower`});
  allL(/*t*/ {`0`},'L);
  allL(/*ro*/ {`0`},'L);
  allL(/*ho*/ {`0`},'L);
  implyL('L); <(
    print({`Use case 1`});
    hideR('R=={`abs(r)>rp|abs(h)>hp`});
    abbrv({`maxI(w,dhf,dhd)`}, {`maxI`});
    minmax(-7.1); /* todo max('L, "max(0,w*(dhf-dhd))".asTerm) */
    print({`MinMax Lower`});
    QE;
    done
    ,
    print({`Absolute value`});
    smartQE;
    done
  );
  done
  ,
  print({`before inst 0 upper`});
  allL(/*t*/ {`0`},'L);
  allL(/*ro*/ {`0`},'L);
  allL(/*ho*/ {`0`},'L);
  implyL('L); <(
    print({`Use case 1`});
    hideR('R=={`abs(r)>rp|abs(h)>hp`});
    abbrv({`maxI(w,dhfM,dhd)`}, {`maxIM`});
    minmax(-7.1); /* todo max('L, "max(0,w*(dhfM-dhd))".asTerm) */
    print({`MinMax Upper`});
    QE
    ,
    print({`Absolute value`});
    smartQE;
    done
  )
)
End.

End.

Theorem "Theorem 3: Correctness of Two-Sided Safe Regions".

ProgramVariables.
  R w.
  R dhf.
  R dhfM.
  R dhd.
  R ao.
  R h.
  R rv.
  R r.
End.


Problem.
  loopInv(w, dhf, dhfM, dhd, r, h)
  -> [
  {   {
      { ?true; ++
        {dhf :=*; {w:=wUp(); ++ w:=wLo();}
         ?( C(w,dhf,dhd,r,h) | CM(w,dhfM,dhd,r,h) );
        }
      }
      ao :=*;
      }
      motion;
   }*@invariant(loopInv(w, dhf, dhfM, dhd, r, h))
  ]( (abs(r) > rp() | abs(h) > hp()) & (C(w,dhf,dhd,r,h) | CM(w,dhfM,dhd,r,h)) )
End.

Tactic "Proof Theorem 3".
implyR('R);
/* do not keep constants around, otherwise simplifier will simplify those first and won't recognize invariant */
loop({`loopInv(w, dhf, dhfM, dhd, r, h)`},'R) /*DLBySubst.loop(invariant, skip)('R);*/ <(
  /*init*/
  print({`Base case`});
  prop;
  done;
  print({`Base case done`})
  ,
  /*use*/
  print({`Use case`});
  andR('R); <(
    useLemma({`Thm 3: Use Case Low`}, {`prop`}); done,
    (andL('L) *); closeId; done
  );
  done;
  print({`Use case done`})
  ,
  /*step*/
  print({`Step`});
  composeb('R); MR({`loopInv(w, dhf, dhfM, dhd, r, h)`},1); <(
    /*show*/ print({`Generalization Holds`});
    chase('R); print({`After chase`});
    ((fullSimplify; andL('L)*)*); print({`Simplified`}); normalize; done; print({`Generalization holds done`})
    ,
    /*use*/
    print({`Generalization Strong Enough`});
    /* todo refactor to instantiate with t=0 after solve  */
    cut({`!evolutionDomain(w,dhf,dhfM,dhd,ao) | evolutionDomain(w,dhf,dhfM,dhd,ao)`}); <(
      nil,
      cohideR('R=={`!evolutionDomain(w,dhf,dhfM,dhd,ao) | evolutionDomain(w,dhf,dhfM,dhd,ao)`});
      prop;
      done
    );
    orL('L=={`!evolutionDomain(w,dhf,dhfM,dhd,ao) | evolutionDomain(w,dhf,dhfM,dhd,ao)`}); <(
      /*hideL('L=={`loopInv(w, dhf, dhfM, dhd, r, h)`});*/ /* doesn't find but don't know why */
      print({`Before DI`});
      hideL(-2);
      cut({`[motion;]0=1`}); <(
        nil,
        hideR('R=={`[motion;]loopInv(w, dhf, dhfM, dhd, r, h)`}); dI('Rlast); done; print({`dI done`})
      );
      hideL('L=={`!evolutionDomain(w,dhf,dhfM,dhd,ao)`});
      print({`After DI`});
      dC({`0=1`},'R); <(
        /*use*/ print({`After DC 2`}); dW('R); print({`after DW`}); QE; done; print({`DC 2 done`}),
        /*show*/ print({`After DC 1`}); closeId; done; print({`DC 1 done`})
      );
      done;
      print({`Use cut done`})
      ,
      print({`Before diff. solution`});
      abbrv({`max((0,w*(dhf-dhd)))`}, {`maxI`});
      abbrv({`max((0,w*(dhfM-dhd)))`}, {`maxIM`});
      solveEnd('R);
      print({`Diff. Solution`});
      allR('R);
      implyR('R)*2; (andL('L) *);
      andR('R); <(
        andR('R); <(
          closeId,
          print({`bla2`}); orR('R);
            orL('L=={`\forall t \forall ro \forall ho (0<=t&t < maxI/a&ro=rv*t&ho=w*a/2*t^2+dhd*t|t>=maxI/a&ro=rv*t&ho=dhf*t-w*maxI^2/(2*a)->abs(r-ro)>rp|w*h < w*ho-hp)|\forall t \forall ro \forall ho (0<=t&t < maxIM/aM&ro=rv*t&ho=w*aM/2*t^2+dhd*t|t>=maxIM/aM&ro=rv*t&ho=(dhd+w*maxIM)*t-w*maxIM^2/(2*aM)->abs(r-ro)>rp|w*h>w*ho+hp)`});
            /*orL('L~={`C(w,dhf,dhd,r,h)|CM(w,dhfM,dhd,r,h)`});*/ <(
              hideL('L=={`maxIM=maxI(w,dhfM,dhd)`});
              hideL('L=={`aM>0`});
              hideL('L=={`w*dhd<=w*dhfM&w*ao<=aM|w*ao<=0`});
              hideL('L=={`w*(ao*t_+dhd)<=w*dhfM&w*ao<=aM|w*ao<=0`});
              hideR('R=={`\forall t \forall ro \forall ho (0<=t&t < max((0,w*(dhfM-(ao*t_+dhd))))/aM&ro=rv*t&ho=w*aM/2*t^2+(ao*t_+dhd)*t|t>=max((0,w*(dhfM-(ao*t_+dhd))))/aM&ro=rv*t&ho=((ao*t_+dhd)+w*max((0,w*(dhfM-(ao*t_+dhd)))))*t-w*max((0,w*(dhfM-(ao*t_+dhd))))^2/(2*aM)->abs((-rv)*t_+r-ro)>rp|w*(-(ao/2*t_^2+dhd*t_)+h)>w*ho+hp)`});
              print({`lower lemma`});
              useLemma({`Thm 3: Safe Implicit Low`}, {`allL2R(-1); prop`});
              done;
              print({`Lower lemma done`})
              ,
              hideL('L=={`maxI=maxI(w,dhf,dhd)`});
              hideL('L=={`a()>0`});
              hideL('L=={`w*dhd>=w*dhf|w*ao>=a`});
              hideL('L=={`w*(ao*t_+dhd)>=w*dhf|w*ao>=a`});
              hideR('R=={`\forall t \forall ro \forall ho (0<=t&t < max((0,w*(dhf-(ao*t_+dhd))))/a&ro=rv*t&ho=w*a/2*t^2+(ao*t_+dhd)*t|t>=max((0,w*(dhf-(ao*t_+dhd))))/a&ro=rv*t&ho=dhf*t-w*max((0,w*(dhf-(ao*t_+dhd))))^2/(2*a)->abs((-rv)*t_+r-ro)>rp|w*(-(ao/2*t_^2+dhd*t_)+h) < w*ho-hp)`});
              print({`upper lemma`});
              useLemma({`Thm 3: Safe Implicit Up`}, {`allL2R(-1); prop`});
              done;
              print({`Upper lemma done`})
            )
        )
        ,
        QE; done;
        print({`Generalization strong enough done`})
      )
    ) /* end orL */
    /* End cutUseLbl "Generalization strong enough" */
  )
)
End.

End.