ArchiveEntry "Dual Filibuster Game"

ProgramVariables
  Real x;
End.

Problem
  x=0 -> <{{{x:=0;++x:=1;}^@}*@invariant(x=0)}^@> x=0
End.

Tactic "Dual Filibuster Game: Proof 1"
  implyR(1) ; dualDirectd(1) ; loop("x=0", 1) ; <(
  id,
  dualDirectb(1) ; choiced(1) ; assignd(1.0) ; assignd(1.1) ; QE,
  id
  )
End.

End.
ArchiveEntry "Push-around cart"

ProgramVariables
  Real x;     /* cart position */
  Real v;     /* cart velocity */
  Real a;     /* Angel's acceleration */
  Real d;     /* Demon's acceleration */
End.

Problem
  x>=0 & v>=0
->
  [{
    {d:=1;++d:=-1;}^@    /* Demon chooses push or pull */
    {a:=1;++a:=-1;}      /* Angel chooses push or pull */
    {x'=v,v'=a+d}
   }* @invariant(x>=0 & v>=0)
  ] x>=0
End.

Tactic "Push-around cart: Clever Proof"
  implyR(1) ; loop("x>=0&v>=0", 1) ; <(
  prop ; done,
  composeb(1) ; dualDirectb(1) ; choiced(1) ; orR(1) ; hideR(2) ; assignd(1) ; composeb(1) ; choiceb(1) ; assignb(1.0) ; assignb(1.1) ; andR(1) ; <(
    dC("v>=0", 1) ; <(
      dI(1),
      dI(1)
      ),
    dC("v>=0", 1) ; <(
      dI(1),
      dI(1)
      )
    ),
  prop ; done
  )
End.
       
Tactic "Push-around cart: Interactive Proof"
  implyR(1) ; loop("x>=0&v>=0", 1) ; <(
    prop ; done, 
    composeb(1) ; dualDirectb(1) ; choiced(1) ; orR(1) ; hideR(2) ; assignd(1) ; composeb(1) ; choiceb(1) ; assignb(1.0) ; assignb(1.1) ; andR(1) ; <(
      solve(1) ; QE, 
      solve(1) ; QE
    ), 
    prop ; done
  )
End.

End.
       
ArchiveEntry "Wall-E & Eve"

ProgramVariables
  Real w;    /* WALL-E position */
  Real v;    /* WALL-E velocity */
  Real u;    /* WALL-E acceleration */
  Real e;    /* EVE position */
  Real f;    /* EVE velocity */
  Real g;    /* EVE acceleration */
  Real t;    /* time */
End.

Problem
  (w-e)^2<=1 & v=f -> <{{{ {u:=1;++u:=-1;}^@
                           {g:=1;++g:=-1;}
                           t:=0; {w'=v,v'=u, e'=f,f'=g, t'=1 & t<=1}^@
                       }^@}* @invariant((w-e)^2<=1&v=f)}^@> (w-e)^2<=1
End.

Tactic "Wall-E & Eve: Clever Proof"
  implyR(1) ; dualDirectd(1) ; loop("(w-e)^2<=1&v=f", 1) ; <(
  prop ; done,
  dualDirectb(1) ; composed(1) ; dualDirectd(1) ; choiceb(1) ; andR(1) ; <(
    assignb(1) ; composed(1) ; choiced(1) ; orR(1) ; hideR(2) ; assignd(1) ; composed(1) ; assignd(1) ; dualDirectd(1) ; dC("v=f", 1) ; <(
      dI(1),
      dI(1)
      ),
    assignb(1) ; composed(1) ; choiced(1) ; orR(1) ; hideR(1) ; assignd(1) ; composed(1) ; assignd(1) ; dualDirectd(1) ; dC("v=f", 1) ; <(
      dI(1),
      dI(1)
      )
    ),
  prop ; done
  )
End.
       
Tactic "Wall-E & Eve: Standard Proof"
  implyR(1) ; dualDirectd(1) ; loop("(w-e)^2<=1&v=f", 1) ; <(
  prop ; done,
  dualDirectb(1) ; composed(1) ; dualDirectd(1) ; choiceb(1) ; andR(1) ; <(
    assignb(1) ; composed(1) ; choiced(1) ; orR(1) ; hideR(2) ; assignd(1) ; composed(1) ; assignd(1) ; dualDirectd(1) ; solve(1) ; QE,
    assignb(1) ; composed(1) ; choiced(1) ; orR(1) ; hideR(1) ; assignd(1) ; composed(1) ; assignd(1) ; dualDirectd(1) ; solve(1) ; QE
    ),
  prop ; done
  )
End.

End.
       
ArchiveEntry "Goalie in robot soccer"

ProgramVariables
  Real x, y;   /* x/y-coordinate of ball */
  Real v, w;   /* ball's velocity in x/y-direction */
  Real g;      /* y-coordinate of goalie lateral in goal */
  Real u;      /* velocity of goalie */
End.

Problem
  (x/v)^2*(u-w)^2<=1 & x<0&v>0&y=g ->
  <{w:=w; ++ w:=-w;}^@;
   {{u:=u; ++ u:=-u;}; {x'=v,y'=w,g'=u}}*> x^2+(y-g)^2<=1
End.

Tactic "Goalie in robot soccer: Proof 1"
  implyR(1) ; composed(1) ; dualDirectd(1) ; choiceb(1) ; andR(1) ; <(
  assignb(1) ; iterated(1) ; orR(1) ; iterated(2.1) ; diamondOr(2) ; orR(2) ; hideR(3) ; composed(2) ; choiced(2) ; orR(2) ; hideR(3) ; assignd(2) ; solve(2) ; existsR("-x/v", 2) ; QE,
  assignb(1) ; iterated(1) ; orR(1) ; iterated(2.1) ; diamondOr(2) ; orR(2) ; hideR(3) ; composed(2) ; choiced(2) ; orR(2) ; hideR(2) ; assignd(2) ; solve(2) ; existsR("-x/v", 2) ; QE
  )
End.

End.
       
