ProgramVariables.
  R a.
  R b.
  R x.
  R xinit.
  R tau.
  R t.
  R tApprox.

  R d.
  R v.
  R vAsc.
  R vDesc.

  R c.
  R C.

  R x0.
  R d0.
  R t0.

  R HRmin.
  R HRmax.

  R stopDepth. /* The depth at which the diver must stop for a safety stop*/
  R stopTime.  /* The amount of time the diver must stop */
  R stoppedTimerEnabled. /* flag indicating whether the diver is currently stopped at the appropriate depth */
  R stoppedTimer. /* The amount of time the diver stopped. */
End.
Problem.
(
  0 < HRmin & HRmin < HRmax &
  HRmin <= a & a <= HRmax &
  HRmin <= x & x <= HRmax &
  b>0 & tau>0 & t>=0 & vAsc < 0 & vDesc > 0 & d >= 0 & d0 = d & c=0 & C>0 &
  t > tau * HRmax * -d/vAsc + tau*HRmax*(stopTime - stoppedTimer) &
  tApprox = t &
  d > stopDepth &
  stopDepth > 0 &
  stopTime > 0 &
  stoppedTimer = 0 
)
->
[
{
  /* Reset discrete ghosts aka take sensor measurements. */
  x0 := x;
  d0 := d;
  t0 := t;
  /* perform ground truth update (optional) */
  {tApprox := tApprox; ++ tApprox := t;}
  {
    /* Case 1: Descend. */
    {
      ?stoppedTimer = 0;
      ?tApprox > tau*HRmax*-(d + vDesc*C)/vAsc + tau*HRmax*C + tau*HRmax*(stopTime - stoppedTimer);
      a := *;
      ?(HRmin <= a & a <= HRmax);
      v := vDesc;
      stoppedTimerEnabled := 0;
    }
    ++
    /* Case 2: Horizontal movement at varying intensity. */
    {
      a := *;
      ?(HRmin <= a & a <= HRmax);
      ?tApprox > tau*HRmax*-d/vAsc + tau*HRmax*C + tau*HRmax*(stopTime - stoppedTimer);
      {?d = stopDepth & stopTime < stoppedTimer; stoppedTimerEnabled := 1; ++ ?stoppedTimerEnabled = 0;}
      v := 0;
    }
    ++
    /* Case 3: Ascend (no stop required) */
    {
      ?stoppedTimer = stopTime | d > stopDepth;
      a := *;
      ?(HRmin <= a & a <= HRmax);
      /* note: at this point in the code we need that x<=a via a loop invariant */
      v := vAsc;
      stoppedTimerEnabled := 0;
    }
  }
  c := 0;
  {
    x' = -(x-a)*b,
    t' = -tau*x,
    d' = v,
    c' = 1,
    stoppedTimer' = stoppedTimerEnabled
    & d >= 0
    & (d0 <= stopDepth | d >= stopDepth) 
    & stoppedTimer <= stopTime
    & c <= C
  };
  tApprox := tApprox - tau*HRmax*c;
}*@invariant(
  (0 < HRmin & HRmin < HRmax &
   HRmin <= a & a <= HRmax &
   b>0 & tau>0 & vAsc < 0 & vDesc > 0 & d = d0 + v*c & c>=0 & C>0 & stopTime > 0 & stopDepth > 0
  ) &
  (d >= 0 & HRmin <= x & x <= HRmax) &
  tau*HRmax*-d/vAsc + tau*HRmax*(stopTime - stoppedTimer) < t &
  tApprox <= t &
  stopTime >= stoppedTimer &
  (d >= stopDepth | stoppedTimer >= stopTime)
)](t>0 & (d >= stopDepth | stoppedTimer >= stopTime))
/* Tank has oxygen and (no stop is necessary OR not stopped yet OR stopped for
 * long enough already */
End.

