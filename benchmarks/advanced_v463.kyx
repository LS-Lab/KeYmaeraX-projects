ArchiveEntry "ETCS: Essentials".

Description "Essentials of European Train Control System (ETCS)".
Citation "Andre Platzer. Differential dynamic logic for hybrid systems. Journal of Automated Reasoning, 41(2), pages 143-189, 2008.".
Link "http://symbolaris.com/pub/freedL.pdf#page=14".

Definitions.
  R ep(). /* Control cycle duration upper bound */
  R b().  /* Braking force */
  R A().  /* Maximum acceleration */
  R m().  /* End of movement authority (train must not drive past m) */

  R stopDist(R v) = (v^2/(2*b())).                     /* Train stopping distance from speed (.) with braking force b */
  R accCompensation(R v) = (((A()/b()) + 1)*((A()/2)*ep()^2 + ep()*v)).     /* Distance to compensate speed increase. */
  R SB(R v)       = (stopDist(v) + accCompensation(v)).      /* Distance needed to stop safely when accelerating once */

  /* Initial states */
  B initial(R m, R z, R v) <-> (
    v >= 0 &
    m-z >= stopDist(v) &         /* train has sufficient distance to the end of the movement authority to stop safely */
    b()>0 &                                                                                     /* brakes are working */
    A()>=0 &                                                                                     /* engine is working */
    ep()>=0
  ).

  B safe(R m, R z, R v, R d) <-> (
    z >= m -> v <= d      /* train 'z' drives past end of movement authority 'm' only with appropriate speed 'v'<='d' */
  ).

  /* loop invariant: always maintain sufficient stopping distance */
  B loopInv(R m, R z, R v) <-> (v >= 0 & m-z >= stopDist(v)).

  /* train controller */
  HP ctrl ::= {
        ?m() - z <= SB(v); a := -b();    /* train protection: emergency brake when close to end of movement authority */
     ++ ?m() - z >= SB(v); a :=  A();    /* free driving: accelerate when sufficient distance */
  }.

  HP drive ::= {
    t := 0;                                                  /* reset control cycle timer */
    {z'=v, v'=a, t'=1  & v >= 0 & t <= ep()}                 /* drive (not backwards v>=0)
                                                                for at most ep time (t<=ep) until next controller run */
  }.
End.

ProgramVariables.
  R a.  /* Actual acceleration -b <= a <= A */
  R v.  /* Current velocity */
  R z.  /* Train position */
  R t.  /* Actual control cycle duration t <= ep */
End.

/* Safety specification of the form: initial -> [{ctrl;plant}*]safe
 * Starting in any state where initial is true,
 * any number of repetitions of running a controller 'ctrl' and then driving according to 'plant'
 * keeps the system safe (end up only in states where 'safe' is true).
 */
Problem.
initial(m(),z,v)  ->
    [
      {
        ctrl;
        drive;
      }*@invariant(loopInv(m(),z,v))                       /* repeat, loop invariant documents system design property */
    ] (z <= m())                        /* safety property: train 'z' never drives past end of movement authority 'm' */
End.

Tactic "Scripted proof".
implyR(1) ; loop({`v>=0&m()-z>=v^2/(2*b())`}, 1) ; <(
  prop,
  QE,
  composeb(1) ; composeb(1.1) ; solve(1.1.1) ; unfold ; doall(QE)
)
End.

Tactic "Automated proof".
  master
End.

End.

ArchiveEntry "ETCS: Proposition 1 (Controllability)".

Description "Proposition 1: Controllability.".
Citation "Andre Platzer and Jan-David Quesel. European Train Control System: A case study in formal verification. In Karin Breitman and Ana Cavalcanti, editors, 11th International Conference on Formal Engineering Methods, ICFEM, Rio de Janeiro, Brasil, Proceedings, volume 5885 of LNCS, pages 246-265. Springer, 2009.".
Link "http://symbolaris.com/pub/ETCS.pdf#page=10".

Definitions.
  R b().  /* Braking force */

  B Assumptions(R v, R d) <-> ( v>=0 & d>=0 & b()>0 ).                                               /* Assumptions A */
End.

ProgramVariables.
  R m.
  R z.
  R v.
  R d.
End.

Problem.
  Assumptions(v,d) & z<=m
  ->
  ( [ {z'=v, v'=-b() & v>=0 } ](z>=m -> v<=d)
    <->
    v^2-d^2 <= 2*b()*(m-z)
  )
End.

Tactic "Scripted proof".
  implyR(1); equivR(1); <(
    solve('Llast); QE,
    solve('Rlast); QE
  )
End.

Tactic "Automated proof".
  master
End.

End.

ArchiveEntry "ETCS: Proposition 4 (Reactivity)".

Description "Proposition 4: Reactivity constraint".
Citation "Andre Platzer and Jan-David Quesel. European Train Control System: A case study in formal verification. In Karin Breitman and Ana Cavalcanti, editors, 11th International Conference on Formal Engineering Methods, ICFEM, Rio de Janeiro, Brasil, Proceedings, volume 5885 of LNCS, pages 246-265. Springer, 2009.".
Link "http://symbolaris.com/pub/ETCS.pdf#page=12".

Definitions.
  R ep(). /* Control cycle duration upper bound */
  R b().  /* Braking force */
  R A().  /* Maximum acceleration */

  B Assumptions(R v, R d) <-> ( v>=0 & d>=0 & b()>0 ).                                               /* Assumptions A */

  B Controllable(R m, R z, R v, R d) <-> (                                            /* Controllability constraint C */
    v^2-d^2 <= 2*b()*(m-z) & Assumptions(v,d)
  ).

  HP drive ::= {
    t := 0;                                                  /* reset control cycle timer */
    {z'=v, v'=a, t'=1  & v >= 0 & t <= ep()}                 /* drive (not backwards v>=0)
                                                                for at most ep time (t<=ep) until next controller run */
  }.

End.

ProgramVariables.
  R vdes.
  R sb.
  R mo.
  R t.
  R a.
  R v.
  R z.
  R m.
  R d.
  R do.
  R em.
End.

Problem.
em = 0 & d >= 0 & b() > 0 & ep() > 0 & A() > 0 & v>=0
  -> ((\forall m \forall z (m-z>= sb & Controllable(m,z,v,d) -> [ a:=A(); drive; ]Controllable(m,z,v,d)) )
      <->
      sb >= (v^2 - d^2) /(2*b()) + (A()/b() + 1) * (A()/2 * ep()^2 + ep()*v)
     )
End.

Tactic "Scripted proof".
  /* requires QE({`Mathematica`}) */
  implyR(1); equivR(1); <(
    composeb(-2.0.0.1); composeb(-2.0.0.1.1); solve(-2.0.0.1.1.1); assignb(-2.0.0.1.1); assignb(-2.0.0.1); master,
    composeb(1.0.0.1); composeb(1.0.0.1.1); solve(1.0.0.1.1.1); master
  )
End.

Tactic "Automated proof".
  master
End.

End.

ArchiveEntry "ATC: 2 Aircraft Tangential Roundabout Maneuver".

Description "Essentials of Tangential Roundabout Maneuver (TRM) in Air Traffic Control (ATC)".
Citation "Andre Platzer. Differential-algebraic dynamic logic for differential-algebraic programs. Journal of Logic and Computation, 20(1), pages 309-352, 2010.".
Link "https://doi.org/10.1093/logcom/exn070".

Definitions.
  R p().  /* protected zone radius */

  B safeSeparation(R x1, R y1, R x2, R y2) <-> ( (x1-y1)^2 + (x2-y2)^2 >= p()^2 ).
End.

ProgramVariables.
  R x1.   /* x-position of aircraft 1 */
  R x2.   /* y-position of aircraft 1 */
  R d1.   /* x-direction of aircraft 1 */
  R d2.   /* y-direction of aircraft 1 */
  R y1.   /* x-position of aircraft 2 */
  R y2.   /* y-position of aircraft 2 */
  R e1.   /* x-direction of aircraft 2 */
  R e2.   /* y-direction of aircraft 2 */
  R om.   /* angular velocity of aircraft 1 */
  R omy.  /* angular velocity of aircraft 2 */
  R c1.   /* x-position of center of roundabout circle */
  R c2.   /* y-position of center of roundabout circle */
End.

Problem.
  safeSeparation(x1, y1, x2, y2)
  ->
   [{
      {
         om:=*;omy:=*;
         {x1'=d1,x2'=d2, d1'=-om*d2,d2'=om*d1, y1'=e1,y2'=e2, e1'=-omy*e2,e2'=omy*e1
          & safeSeparation(x1, y1, x2, y2)}
       }*@invariant(safeSeparation(x1, y1, x2, y2));
       c1:=*;c2:=*; om:=*;
       d1:=-om*(x2-c2); d2:=om*(x1-c1);
       e1:=-om*(y2-c2); e2:=om*(y1-c1);
       {
       {x1'=d1,x2'=d2, d1'=-om*d2,d2'=om*d1, y1'=e1,y2'=e2, e1'=-om*e2,e2'=om*e1}
       @invariant(d1-e1=-om*(x2-y2)&d2-e2=om*(x1-y1))
       }
    }*@invariant(safeSeparation(x1, y1, x2, y2))
  ]safeSeparation(x1, y1, x2, y2)
End.

Tactic "Scripted proof".
implyR(1) ; loop({`(x1-y1)^2+(x2-y2)^2>=p()^2`}, 1) ; <(
  id,
  id,
  composeb(1) ; loop({`(x1-y1)^2+(x2-y2)^2>=p()^2`}, 1) ; <(
    id,
    unfold ; diffInvariant({`d1-e1=-om*(x2-y2)&d2-e2=om*(x1-y1)`}, 1) ; dI(1),
    unfold ; dW(1) ; prop
    )
  )
End.

Tactic "Automated proof".
  master
End.

End.

ArchiveEntry "ATC: 3 Aircraft Tangential Roundabout Maneuver".

Description "Essentials of Tangential Roundabout Maneuver (TRM) in Air Traffic Control (ATC)".
Citation "Andre Platzer. Differential-algebraic dynamic logic for differential-algebraic programs. Journal of Logic and Computation, 20(1), pages 309-352, 2010.".
Link "https://doi.org/10.1093/logcom/exn070".

Definitions.
  R p().  /* protected zone radius */

  B safeSeparation(R x1, R y1, R x2, R y2) <-> ( (x1-y1)^2 + (x2-y2)^2 >= p()^2 ).

  B safeSeparation3(R x1, R y1, R x2, R y2, R z1, R z2) <-> (
      safeSeparation(x1, y1, x2, y2)
    & safeSeparation(y1, z1, y2, z2)
    & safeSeparation(x1, z1, x2, z2)
  ).

End.

ProgramVariables.
  R x1.   /* x-position of aircraft 1 */
  R x2.   /* y-position of aircraft 1 */
  R d1.   /* x-direction of aircraft 1 */
  R d2.   /* y-direction of aircraft 1 */
  R y1.   /* x-position of aircraft 2 */
  R y2.   /* y-position of aircraft 2 */
  R e1.   /* x-direction of aircraft 2 */
  R e2.   /* y-direction of aircraft 2 */
  R z1.   /* x-position of aircraft 3 */
  R z2.   /* y-position of aircraft 3 */
  R f1.   /* x-direction of aircraft 3 */
  R f2.   /* y-direction of aircraft 3 */
  R om.   /* angular velocity of aircraft 1 */
  R omy.  /* angular velocity of aircraft 2 */
  R omz.  /* angular velocity of aircraft 3 */
  R c1.   /* x-position of center of roundabout circle */
  R c2.   /* y-position of center of roundabout circle */
End.

Problem.
  safeSeparation3(x1, y1, x2, y2, z1, z2)
  ->
   [{
       {
         om:=*;omy:=*;omz:=*;
         {x1'=d1,x2'=d2, d1'=-om*d2,d2'=om*d1,
          y1'=e1,y2'=e2, e1'=-omy*e2,e2'=omy*e1,
          z1'=f1,z2'=f2, f1'=-omz*f2,f2'=omz*f1 & safeSeparation3(x1, y1, x2, y2, z1, z2) }
       }*@invariant(safeSeparation3(x1, y1, x2, y2, z1, z2));
       c1:=*;c2:=*; om:=*;
       d1:=-om*(x2-c2); d2:=om*(x1-c1);
       e1:=-om*(y2-c2); e2:=om*(y1-c1);
       f1:=-om*(z2-c2); f2:=om*(z1-c1);
       {
       {x1'=d1,x2'=d2, d1'=-om*d2,d2'=om*d1,
        y1'=e1,y2'=e2, e1'=-om*e2,e2'=om*e1,
        z1'=f1,z2'=f2, f1'=-om*f2,f2'=om*f1}
       @invariant(
          d1=-om*(x2-c2)&d2=om*(x1-c1) & e1=-om*(y2-c2)&e2=om*(y1-c1) & f1=-om*(z2-c2)&f2=om*(z1-c1))
       }
    }*@invariant(safeSeparation3(x1, y1, x2, y2, z1, z2))
   ]safeSeparation3(x1, y1, x2, y2, z1, z2)
End.

Tactic "Scripted proof".
implyR(1) ; loop({`(x1-y1)^2+(x2-y2)^2>=p()^2&(y1-z1)^2+(y2-z2)^2>=p()^2&(x1-z1)^2+(x2-z2)^2>=p()^2`}, 1) ; <(
  prop,
  prop,
  composeb(1) ; loop({`(x1-y1)^2+(x2-y2)^2>=p()^2&(y1-z1)^2+(y2-z2)^2>=p()^2&(x1-z1)^2+(x2-z2)^2>=p()^2`}, 1) ; <(
    prop,
    unfold ;
    diffInvariant({`d1=-om*(x2-c2)&d2=om*(x1-c1)`}, 1) ;
    diffInvariant({`e1=-om*(y2-c2)&e2=om*(y1-c1)`}, 1) ;
    diffInvariant({`f1=-om*(z2-c2)&f2=om*(z1-c1)`}, 1) ; ODE(1),
    unfold ; dW(1) ; prop
    )
  )
End.

Tactic "Scripted proof 2".
implyR(1) ; loop({`(x1-y1)^2+(x2-y2)^2>=p()^2&(y1-z1)^2+(y2-z2)^2>=p()^2&(x1-z1)^2+(x2-z2)^2>=p()^2`}, 1) ; <(
  prop,
  prop,
  composeb(1) ; loop({`(x1-y1)^2+(x2-y2)^2>=p()^2&(y1-z1)^2+(y2-z2)^2>=p()^2&(x1-z1)^2+(x2-z2)^2>=p()^2`}, 1) ; <(
  prop,
    unfold ;
    diffInvariant({`d1=-om*(x2-c2)&d2=om*(x1-c1)`}, 1) ;
    diffInvariant({`e1=-om*(y2-c2)&e2=om*(y1-c1)`}, 1) ;
    diffInvariant({`f1=-om*(z2-c2)&f2=om*(z1-c1)`}, 1) ;
    boxAnd(1) ; andR(1) ; <(
      hideL(-2=={`(y1-z1)^2+(y2-z2)^2>=p()^2`}) ; hideL(-2=={`(x1-z1)^2+(x2-z2)^2>=p()^2`}) ;
      hideL(-4=={`e1=-om*(y2-c2)`}) ; hideL(-4=={`e2=om*(y1-c1)`}) ;
      hideL(-4=={`f1=-om*(z2-c2)`}) ; hideL(-4=={`f2=om*(z1-c1)`}) ; dI(1),
      boxAnd(1) ; andR(1) ; <(
        hideL(-1=={`(x1-y1)^2+(x2-y2)^2>=p()^2`}) ; hideL(-2=={`(x1-z1)^2+(x2-z2)^2>=p()^2`}) ;
        hideL(-2=={`d1=-om*(x2-c2)`}) ; hideL(-2=={`d2=om*(x1-c1)`}) ;
        hideL(-4=={`f1=-om*(z2-c2)`}) ; hideL(-4=={`f2=om*(z1-c1)`}) ; dI(1),
        hideL(-1=={`(x1-y1)^2+(x2-y2)^2>=p()^2`}) ; hideL(-1=={`(y1-z1)^2+(y2-z2)^2>=p()^2`}) ;
        hideL(-2=={`d1=-om*(x2-c2)`}) ; hideL(-2=={`d2=om*(x1-c1)`}) ;
        hideL(-2=={`e1=-om*(y2-c2)`}) ; hideL(-2=={`e2=om*(y1-c1)`}) ; dI(1)
      )
    ),
    unfold ; dW(1) ; prop
  )
)

End.

Tactic "Automated proof".
  master
End.

End.

ArchiveEntry "ATC: 4 Aircraft Tangential Roundabout Maneuver".

Description "Essentials of Tangential Roundabout Maneuver (TRM) in Air Traffic Control (ATC)".
Citation "Andre Platzer. Differential-algebraic dynamic logic for differential-algebraic programs. Journal of Logic and Computation, 20(1), pages 309-352, 2010.".
Link "https://doi.org/10.1093/logcom/exn070".

Definitions.
  R p().  /* protected zone radius */

  B safeSeparation(R x1, R y1, R x2, R y2) <-> ( (x1-y1)^2 + (x2-y2)^2 >= p()^2 ).

  B safeSeparation4(R x1, R y1, R x2, R y2, R z1, R z2, R u1, R u2) <-> (
      safeSeparation(x1, y1, x2, y2)
    & safeSeparation(y1, z1, y2, z2)
    & safeSeparation(x1, z1, x2, z2)
    & safeSeparation(x1, u1, x2, u2)
    & safeSeparation(y1, u1, y2, u2)
    & safeSeparation(z1, u1, z2, u2)
  ).

End.

ProgramVariables.
  R x1.   /* x-position of aircraft 1 */
  R x2.   /* y-position of aircraft 1 */
  R d1.   /* x-direction of aircraft 1 */
  R d2.   /* y-direction of aircraft 1 */
  R y1.   /* x-position of aircraft 2 */
  R y2.   /* y-position of aircraft 2 */
  R e1.   /* x-direction of aircraft 2 */
  R e2.   /* y-direction of aircraft 2 */
  R z1.   /* x-position of aircraft 3 */
  R z2.   /* y-position of aircraft 3 */
  R f1.   /* x-direction of aircraft 3 */
  R f2.   /* y-direction of aircraft 3 */
  R u1.   /* x-position of aircraft 4 */
  R u2.   /* y-position of aircraft 4 */
  R g1.   /* x-direction of aircraft 4 */
  R g2.   /* y-direction of aircraft 4 */
  R om.   /* angular velocity of aircraft 1 */
  R omy.  /* angular velocity of aircraft 2 */
  R omz.  /* angular velocity of aircraft 3 */
  R omu.  /* angular velocity of aircraft 4 */
  R c1.   /* x-position of center of roundabout circle */
  R c2.   /* y-position of center of roundabout circle */
End.

Problem.
  safeSeparation4(x1, y1, x2, y2, z1, z2, u1, u2)
  ->
   [{
      {
        om:=*;omy:=*;omz:=*;omu:=*;
        {x1'=d1,x2'=d2, d1'=-om*d2,d2'=om*d1,
         y1'=e1,y2'=e2, e1'=-omy*e2,e2'=omy*e1,
         z1'=f1,z2'=f2, f1'=-omz*f2,f2'=omz*f1,
         u1'=g1,u2'=g2, g1'=-omu*g2,g2'=omu*g1
         & safeSeparation4(x1, y1, x2, y2, z1, z2, u1, u2) }
      }*@invariant(safeSeparation4(x1, y1, x2, y2, z1, z2, u1, u2));
      c1:=*;c2:=*; om:=*;
      d1:=-om*(x2-c2); d2:=om*(x1-c1);
      e1:=-om*(y2-c2); e2:=om*(y1-c1);
      f1:=-om*(z2-c2); f2:=om*(z1-c1);
      g1:=-om*(u2-c2); g2:=om*(u1-c1);
      {
      {x1'=d1,x2'=d2, d1'=-om*d2,d2'=om*d1,
       y1'=e1,y2'=e2, e1'=-om*e2,e2'=om*e1,
       z1'=f1,z2'=f2, f1'=-om*f2,f2'=om*f1,
       u1'=g1,u2'=g2, g1'=-om*g2,g2'=om*g1}
      @invariant((d1=-om*(x2-c2)&d2=om*(x1-c1))&
                 (e1=-om*(y2-c2)&e2=om*(y1-c1))&
                 (f1=-om*(z2-c2)&f2=om*(z1-c1))&
                 (g1=-om*(u2-c2)&g2=om*(u1-c1)))
      }
    }*@invariant(safeSeparation4(x1, y1, x2, y2, z1, z2, u1, u2))
   ]safeSeparation4(x1, y1, x2, y2, z1, z2, u1, u2)
End.

Tactic "Scripted proof".
implyR(1) ; loop({`(x1-y1)^2+(x2-y2)^2>=p()^2&(y1-z1)^2+(y2-z2)^2>=p()^2&(x1-z1)^2+(x2-z2)^2>=p()^2&(x1-u1)^2+(x2-u2)^2>=p()^2&(y1-u1)^2+(y2-u2)^2>=p()^2&(z1-u1)^2+(z2-u2)^2>=p()^2`}, 1) ; <(
  prop,
  prop,
  composeb(1) ; loop({`(x1-y1)^2+(x2-y2)^2>=p()^2&(y1-z1)^2+(y2-z2)^2>=p()^2&(x1-z1)^2+(x2-z2)^2>=p()^2&(x1-u1)^2+(x2-u2)^2>=p()^2&(y1-u1)^2+(y2-u2)^2>=p()^2&(z1-u1)^2+(z2-u2)^2>=p()^2`}, 1) ; <(
    prop,
    unfold ;
    diffInvariant({`d1=-om*(x2-c2)&d2=om*(x1-c1)`}, 1) ;
    diffInvariant({`e1=-om*(y2-c2)&e2=om*(y1-c1)`}, 1) ;
    diffInvariant({`f1=-om*(z2-c2)&f2=om*(z1-c1)`}, 1) ;
    diffInvariant({`g1=-om*(u2-c2)&g2=om*(u1-c1)`}, 1) ;
    boxAnd(1) ; andR(1) ; <(
      ODE(1),
      boxAnd(1) ; andR(1) ; <(
        ODE(1),
        boxAnd(1) ; andR(1) ; <(
          ODE(1),
          boxAnd(1) ; andR(1) ; <(
            ODE(1),
            boxAnd(1) ; andR(1) ; <(
              ODE(1),
              ODE(1)
              )
            )
          )
        )
      ),
    unfold ; dW(1) ; prop
    )
  )
End.

Tactic "Scripted proof 2".
implyR(1) ; loop({`(x1-y1)^2+(x2-y2)^2>=p()^2&(y1-z1)^2+(y2-z2)^2>=p()^2&(x1-z1)^2+(x2-z2)^2>=p()^2&(x1-u1)^2+(x2-u2)^2>=p()^2&(y1-u1)^2+(y2-u2)^2>=p()^2&(z1-u1)^2+(z2-u2)^2>=p()^2`}, 1) ; <(
  prop,
  prop,
  composeb(1) ; loop({`(x1-y1)^2+(x2-y2)^2>=p()^2&(y1-z1)^2+(y2-z2)^2>=p()^2&(x1-z1)^2+(x2-z2)^2>=p()^2&(x1-u1)^2+(x2-u2)^2>=p()^2&(y1-u1)^2+(y2-u2)^2>=p()^2&(z1-u1)^2+(z2-u2)^2>=p()^2`}, 1) ; <(
    prop,
    unfold ;
    diffInvariant({`d1=-om*(x2-c2)&d2=om*(x1-c1)`}, 1) ;
    diffInvariant({`e1=-om*(y2-c2)&e2=om*(y1-c1)`}, 1) ;
    diffInvariant({`f1=-om*(z2-c2)&f2=om*(z1-c1)`}, 1) ;
    diffInvariant({`g1=-om*(u2-c2)&g2=om*(u1-c1)`}, 1) ;
    hideL(-7=={`d1=-om*(x2-c2)`}) ; hideL(-7=={`d2=om*(x1-c1)`}) ;
    hideL(-7=={`e1=-om*(y2-c2)`}) ; hideL(-7=={`e2=om*(y1-c1)`}) ;
    hideL(-7=={`f1=-om*(z2-c2)`}) ; hideL(-7=={`f2=om*(z1-c1)`}) ;
    hideL(-7=={`g1=-om*(u2-c2)`}) ; hideL(-7=={`g2=om*(u1-c1)`}) ;
    boxAnd(1) ; andR(1) ; <(
      hideL(-2=={`(y1-z1)^2+(y2-z2)^2>=p()^2`}) ; hideL(-2=={`(x1-z1)^2+(x2-z2)^2>=p()^2`}) ;
      hideL(-2=={`(x1-u1)^2+(x2-u2)^2>=p()^2`}) ; hideL(-2=={`(y1-u1)^2+(y2-u2)^2>=p()^2`}) ;
      hideL(-2=={`(z1-u1)^2+(z2-u2)^2>=p()^2`}) ; dI(1),
      boxAnd(1) ; andR(1) ; <(
        hideL(-1=={`(x1-y1)^2+(x2-y2)^2>=p()^2`}) ; hideL(-2=={`(x1-z1)^2+(x2-z2)^2>=p()^2`}) ;
        hideL(-2=={`(x1-u1)^2+(x2-u2)^2>=p()^2`}) ; hideL(-2=={`(y1-u1)^2+(y2-u2)^2>=p()^2`}) ;
        hideL(-2=={`(z1-u1)^2+(z2-u2)^2>=p()^2`}) ; dI(1),
        boxAnd(1) ; andR(1) ; <(
          hideL(-1=={`(x1-y1)^2+(x2-y2)^2>=p()^2`}) ; hideL(-1=={`(y1-z1)^2+(y2-z2)^2>=p()^2`}) ;
          hideL(-2=={`(x1-u1)^2+(x2-u2)^2>=p()^2`}) ; hideL(-2=={`(y1-u1)^2+(y2-u2)^2>=p()^2`}) ;
          hideL(-2=={`(z1-u1)^2+(z2-u2)^2>=p()^2`}) ; dI(1),
          boxAnd(1) ; andR(1) ; <(
            hideL(-1=={`(x1-y1)^2+(x2-y2)^2>=p()^2`}) ; hideL(-1=={`(y1-z1)^2+(y2-z2)^2>=p()^2`}) ;
            hideL(-1=={`(x1-z1)^2+(x2-z2)^2>=p()^2`}) ; hideL(-2=={`(y1-u1)^2+(y2-u2)^2>=p()^2`}) ;
            hideL(-2=={`(z1-u1)^2+(z2-u2)^2>=p()^2`}) ; dI(1),
            boxAnd(1) ; andR(1) ; <(
              hideL(-1=={`(x1-y1)^2+(x2-y2)^2>=p()^2`}) ; hideL(-1=={`(y1-z1)^2+(y2-z2)^2>=p()^2`}) ;
              hideL(-1=={`(x1-z1)^2+(x2-z2)^2>=p()^2`}) ; hideL(-1=={`(x1-u1)^2+(x2-u2)^2>=p()^2`}) ;
              hideL(-2=={`(z1-u1)^2+(z2-u2)^2>=p()^2`}) ; dI(1),
              hideL(-1=={`(x1-y1)^2+(x2-y2)^2>=p()^2`}) ; hideL(-1=={`(y1-z1)^2+(y2-z2)^2>=p()^2`}) ;
              hideL(-1=={`(x1-z1)^2+(x2-z2)^2>=p()^2`}) ; hideL(-1=={`(x1-u1)^2+(x2-u2)^2>=p()^2`}) ;
              hideL(-1=={`(y1-u1)^2+(y2-u2)^2>=p()^2`}) ; dI(1)
              )
            )
          )
        )
      ),
    unfold ; dW(1) ; prop
    )
  )
End.

Tactic "Automated proof".
  master
End.

End.

ArchiveEntry "Robot collision avoidance in two-dimensional space: Static safety".

Description "Safety of collision avoidance in environments with all stationary obstacles.".
Citation "Stefan Mitsch, Khalil Ghorbal, David Vogelbacher, and Andr Platzer. Formal verification of obstacle avoidance and navigation of ground robots. International Journal of Robotics Research. 36(12), pp. 1312-1340, 2017.".
Link "http://symbolaris.com/pub/morerobix.pdf#page=8".

Functions.
  R ep().      /* time limit for control decisions */
  R b().       /* minimum braking capability of the robot */
  R A().       /* maximum acceleration -b <= a <= A */
  R W().       /* maximum steering */
  R abs(R).    /* predefined function of absolute value */

  R stopDist(R v) = (v^2 / (2*b())).            /* The straight-line stopping distance from brake start to full stop. */
  R accelComp(R v) = ((A()/b() + 1) * (A()/2 * ep()^2 + ep()*v))./* Straight-line distance to compensate acceleration */
  R admissibleSeparation(R v) = (stopDist(v) + accelComp(v)).   /* Separation that allows accelerating on a new curve */

  B isWellformedDir() <-> (dx^2 + dy^2 = 1).                        /* The orientation of the robot is a unit vector. */

  B bounds() <-> (                                                                     /* Bounds for global constants */
      A() >= 0                                                                                      /* Working engine */
    & b() > 0                                                                                       /* Working brakes */
    & ep() > 0                                                                            /* Controller reaction time */
  ).

  B initialState() <-> (                                                          /* Stopped somewhere safe initially */
    v = 0
    & (x-xo)^2 + (y-yo)^2 > 0
    & isWellformedDir()
  ).

  B assumptions() <-> (bounds() & initialState()).                     /* Under these assumptions we guarantee safety */

  B loopinv() <-> (                                                /* Conditions that are true on each loop iteration */
    v >= 0
    & isWellformedDir()
    & (abs(x-xo) > stopDist(v) | abs(y-yo) > stopDist(v))
  ).
End.

ProgramVariables.
  R x.    /* robot position: x */
  R y.    /* robot position: y */
  R v.    /* robot translational velocity */
  R a.    /* robot translational acceleration */
  R dx.   /* robot orientation: x */
  R dy.   /* robot orientation: y */
  R w.    /* robot rotational velocity */
  R r.    /* robot curve radius */
  R xo.   /* position of closest obstacle on curve */
  R yo.
  R t.    /* time */
End.

Problem.
assumptions() ->
  [
    {
      {
        {
          /* brake on current curve or remain stopped */
          { a := -b; }
          ++
          { ?v = 0; a := 0; w := 0; }
      	  ++
          /* or choose a new safe curve */
          { a := A;
            w := *; ?-W<=w & w<=W;       /* choose steering */
            r := *;
            xo := *; yo := *;            /* measure closest obstacle on the curve */

            /* admissible curve */
            ?r!=0 & r*w = v;

            /* use that curve, if it is a safe one (admissible velocities) */
            ? abs(x-xo) > admissibleSeparation(v)
            | abs(y-yo) > admissibleSeparation(v);
          }
        };
    	  t := 0;
      }

      /* dynamics */
      {
      { x' = v * dx, y' = v * dy, v' = a,        /* accelerate/decelerate and move */
        dx' = -w * dy, dy' = w * dx, w' = a/r,   /* follow curve */
        t' = 1 & t <= ep & v >= 0
      }@invariant(t>=0, isWellformedDir(),
        (v'=-b() -> v = old(v) - b()*t),
        (v'=-b() -> (-t * (old(v) - b()/2*t) <= x - old(x) & x - old(x) <= t * (old(v) - b()/2*t))),
        (v'=-b() -> (-t * (old(v) - b()/2*t) <= y - old(y) & y - old(y) <= t * (old(v) - b()/2*t))),
        (v'=0 -> v = old(v)),
        (v'=0 -> x = old(x)),
        (v'=0 -> y = old(y)),
        (v'=A() -> v = old(v) + A()*t),
        (v'=A() -> (-t * (old(v) + A()/2*t) <= x - old(x) & x - old(x) <= t * (old(v) + A()/2*t))),
        (v'=A() -> (-t * (old(v) + A()/2*t) <= y - old(y) & y - old(y) <= t * (old(v) + A()/2*t)))
      )
      }
    }*@invariant(loopinv())
  ](x - xo)^2 + (y - yo)^2 > 0
End.

Tactic "Scripted proof".
  tactic diall as (
    diffInvariant({`t>=0`}, 1);
    diffInvariant({`dx^2+dy^2=1`}, 1)
  );

  tactic dib as (
    diall;
    diffInvariant({`v = old(v) - b()*t`}, 1);
    diffInvariant({`-t * (v + b()/2*t) <= x - old(x) & x - old(x) <= t * (v + b()/2*t)`}, 1);
    diffInvariant({`-t * (v + b()/2*t) <= y - old(y) & y - old(y) <= t * (v + b()/2*t)`}, 1)
  );

  tactic di0 as (
    diall;
    diffInvariant({`v = old(v)`}, 1);
    diffInvariant({`x = old(x)`}, 1);
    diffInvariant({`y = old(y)`}, 1)
  );

  tactic dia as (
    diall;
    diffInvariant({`v = old(v) + A()*t`}, 1);
    diffInvariant({`-t * (v - A()/2*t) <= x - old(x) & x - old(x) <= t * (v - A()/2*t)`}, 1);
    diffInvariant({`-t * (v - A()/2*t) <= y - old(y) & y - old(y) <= t * (v - A()/2*t)`}, 1)
  );

  tactic dw as (andL('L)*; dW(1));

  tactic xAccArith as (
    andL('L)*;
    print({`Transforming...`});
    transform({`abs(x_0-xo)>v_0^2/(2*b())+(A()/b()+1)*(A()/2*t^2+t*v_0)`}, 'L=={`abs(x_0-xo)>v_0^2/(2*b()) + (A()/b() + 1) * (A()/2 * ep()^2 + ep()*v_0)`});
    hideR('R=={`abs(y-yo)>v^2 / (2*b())`});
    smartQE;
    print({`Proved acc arithmetic`})
  );

  tactic yAccArith as (
    andL('L)*;
    print({`Transforming...`});
    transform({`abs(y_0-yo)>v_0^2/(2*b())+(A()/b()+1)*(A()/2*t^2+t*v_0)`}, 'L=={`abs(y_0-yo)>v_0^2/(2*b()) + (A()/b() + 1) * (A()/2 * ep()^2 + ep()*v_0)`});
    hideR('R=={`abs(x-xo)>v^2 / (2*b())`});
    smartQE;
    print({`Proved acc arithmetic`})
  );

  implyR(1); andL('L)*; loop({`v >= 0 & dx^2+dy^2=1 & (abs(x-xo) > v^2 / (2*b()) | abs(y-yo) > v^2 / (2*b()))`}, 1); <(
    print({`Base case...`}); smartQE; print({`Base case done`})
    ,
    print({`Use case...`}); smartQE; print({`Use case done`})
    ,
    print({`Induction step`}); unfold; <(
      print({`Braking branch`}); dib; dw; prop; doall(smartQE); print({`Braking branch done`})
      ,
      print({`Stopped branch`}); di0; dw; prop; doall(smartQE); print({`Stopped branch done`})
      ,
      print({`Acceleration branch`});
      hideL('L == {`abs(x-xo_0)>v^2 / (2*b())|abs(y-yo_0)>v^2 / (2*b())`});
      dia; dw;
      prop; <(
        xAccArith,
        yAccArith
      );
      print({`Acceleration branch done`})
    );
    print({`Induction step done`})
  );
  done;
  print({`Proof done`})
End.

Tactic "Automated proof".
  master
End.

End.

ArchiveEntry "Robot collision avoidance in two-dimensional space: Passive safety".

Description "Safety of collision avoidance in environments with moving obstacles of known maximum speed.".
Citation "Stefan Mitsch, Khalil Ghorbal, David Vogelbacher, and Andr Platzer. Formal verification of obstacle avoidance and navigation of ground robots. International Journal of Robotics Research. 36(12), pp. 1312-1340, 2017.".
Link "http://symbolaris.com/pub/morerobix.pdf#page=11".


Functions.
  R ep().      /* time limit for control decisions */
  R b().       /* minimum braking capability of the robot */
  R A().       /* maximum acceleration -b <= a <= A */
  R W().       /* maximum steering */
  R V().       /* maximum obstacle velocity */
  R abs(R).    /* predefined function of absolute value */

  R stopDist(R v) = (v^2 / (2*b()) + V()*v/b()).
  R accelComp(R v) = ((A()/b() + 1) * (A()/2 * ep()^2 + ep()*(v+V))).
  R admissibleSeparation(R v) = (stopDist(v) + accelComp(v)).

  B isWellformedDir() <-> (dx^2 + dy^2 = 1).                        /* The orientation of the robot is a unit vector. */

  B bounds() <-> (                                                                     /* Bounds for global constants */
      A() >= 0                                                                                      /* Working engine */
    & b() > 0                                                                                       /* Working brakes */
    & ep() > 0                                                                            /* Controller reaction time */
    & V() >= 0
  ).
  B initialState() <-> (                                                          /* Stopped somewhere safe initially */
    v = 0
    & (x-xo)^2 + (y-yo)^2 > 0
    & isWellformedDir()
  ).
  B assumptions() <-> (bounds() & initialState()).                     /* Under these assumptions we guarantee safety */

  B loopinv() <-> (                                                /* Conditions that are true on each loop iteration */
    v >= 0
    & isWellformedDir()
    & (v>0 -> abs(x-xo) > stopDist(v) | abs(y-yo) > stopDist(v))
  ).
End.

ProgramVariables.
  R x.    /* robot position: x */
  R y.    /* robot position: y */
  R v.    /* robot translational velocity */
  R a.    /* robot translational acceleration */
  R dx.   /* robot orientation: x */
  R dy.   /* robot orientation: y */
  R w.    /* robot rotational velocity */
  R r.    /* robot curve radius */
  R xo.   /* position of closest obstacle on curve */
  R yo.
  R vxo.  /* velocity vector of obstacle */
  R vyo.
  R t.    /* time */
End.

Problem.
assumptions() ->
  [
    {
      {
        /* obstacle control */
        {
          vxo := *; vyo := *;
          ?vxo^2+vyo^2<=V^2;
        }
        /* robot control */
        {
          /* brake on current curve or remain stopped */
          { a := -b; }
          ++
          { ?v = 0; a := 0; w := 0; }
      	  ++
          /* or choose a new safe curve */
          { a := A;
            w := *; ?-W<=w & w<=W;       /* choose steering */
            r := *;
            xo := *; yo := *;            /* measure closest obstacle on the curve */

            /* admissible curve */
            ?r!=0 & r*w = v;

            /* use that curve, if it is a safe one (admissible velocities) */
            ? abs(x-xo) > admissibleSeparation(v)
            | abs(y-yo) > admissibleSeparation(v);
          }
        };
    	  t := 0;
      }

      /* dynamics */
      {
      { x' = v * dx, y' = v * dy, v' = a,        /* accelerate/decelerate and move */
        dx' = -w * dy, dy' = w * dx, w' = a/r,   /* follow curve */
        xo' = vxo, yo' = vyo,                    /* obstacle moves */
        t' = 1 & t <= ep & v >= 0
      }@invariant(t>=0, isWellformedDir(),
          (-t*V() <= xo - old(xo) & xo - old(xo) <= t*V()),
          (-t*V() <= yo - old(yo) & yo - old(yo) <= t*V()),
          (v'=-b() -> v = old(v) - b()*t),
          (v'=-b() -> (-t * (old(v) - b()/2*t) <= x - old(x) & x - old(x) <= t * (old(v) - b()/2*t))),
          (v'=-b() -> (-t * (old(v) - b()/2*t) <= y - old(y) & y - old(y) <= t * (old(v) - b()/2*t))),
          (v'=0 -> v = old(v)),
          (v'=0 -> x = old(x)),
          (v'=0 -> y = old(y)),
          (v'=A() -> v = old(v) + A()*t),
          (v'=A() -> (-t * (old(v) + A()/2*t) <= x - old(x) & x - old(x) <= t * (old(v) + A()/2*t))),
          (v'=A() -> (-t * (old(v) + A()/2*t) <= y - old(y) & y - old(y) <= t * (old(v) + A()/2*t)))
        )
      }
    }*@invariant(loopinv())
  ](v>0 -> (x - xo)^2 + (y - yo)^2 > 0)
End.

Tactic "Scripted proof".
  tactic diall as (
    diffInvariant({`t>=0`}, 1);
    diffInvariant({`dx^2 + dy^2 = 1`}, 1);
    diffInvariant({`-t*V() <= xo - old(xo) & xo - old(xo) <= t*V()`}, 1);
    diffInvariant({`-t*V() <= yo - old(yo) & yo - old(yo) <= t*V()`}, 1)
  );

  tactic dib as (
    diall;
    diffInvariant({`v = old(v) - b()*t`}, 1);
    diffInvariant({`-t * (v + b()/2*t) <= x - old(x) & x - old(x) <= t * (v + b()/2*t)`}, 1);
    diffInvariant({`-t * (v + b()/2*t) <= y - old(y) & y - old(y) <= t * (v + b()/2*t)`}, 1)
  );

  tactic di0 as (
    diall;
    diffInvariant({`v = old(v)`}, 1);
    diffInvariant({`x = old(x)`}, 1);
    diffInvariant({`y = old(y)`}, 1)
  );

  tactic dia as (
    diall;
    diffInvariant({`v = old(v) + A()*t`}, 1);
    diffInvariant({`-t * (v - A()/2*t) <= x - old(x) & x - old(x) <= t * (v - A()/2*t)`}, 1);
    diffInvariant({`-t * (v - A()/2*t) <= y - old(y) & y - old(y) <= t * (v - A()/2*t)`}, 1)
  );

  tactic dw as (andL('L)*; dW(1));

  tactic xAccArith as (
    andL('L)*;
    print({`Transforming...`});
    transform({`abs(x_0-xo_0)>v_0^2/(2*b())+V()*v_0/b()+(A()/b()+1)*(A()/2*t^2+t*(v_0+V()))`}, 'L=={`abs(x_0-xo_0)>v_0^2/(2*b())+V()*v_0/b()+(A()/b()+1)*(A()/2*ep()^2+ep()*(v_0+V()))`});
    hideR('R=={`abs(y-yo)>v^2 / (2*b()) + V()*v/b()`});
    smartQE;
    print({`Proved acc arithmetic`})
  );

  tactic yAccArith as (
    andL('L)*;
    print({`Transforming...`});
    transform({`abs(y_0-yo_0)>v_0^2/(2*b())+V()*v_0/b()+(A()/b()+1)*(A()/2*t^2+t*(v_0+V()))`}, 'L=={`abs(y_0-yo_0)>v_0^2/(2*b())+V()*v_0/b()+(A()/b()+1)*(A()/2*ep()^2+ep()*(v_0+V()))`});
    hideR('R=={`abs(x-xo)>v^2 / (2*b()) + V()*v/b()`});
    smartQE;
    print({`Proved acc arithmetic`})
  );

  implyR(1); andL('L)*; loop({`v >= 0 & dx^2+dy^2=1 & (v>0 -> abs(x-xo) > v^2 / (2*b()) + V()*v/b() | abs(y-yo) > v^2 / (2*b()) + V()*v/b())`}, 1); <(
    print({`Base case...`}); smartQE; print({`Base case done`})
    ,
    print({`Use case...`}); smartQE; print({`Use case done`})
    ,
    print({`Induction step`}); unfold; <(
      print({`Braking branch`}); dib; dw; prop; doall(smartQE); print({`Braking branch done`})
      ,
      print({`Stopped branch`}); di0; dw; prop; doall(smartQE); print({`Stopped branch done`})
      ,
      print({`Acceleration branch`});
      hideL('L == {`v>0 -> abs(x-xo_0)>v^2 / (2*b()) + V()*v/b() | abs(y-yo_0)>v^2 / (2*b()) + V()*v/b()`});
      dia; dw;
      prop; <(
        xAccArith,
        yAccArith
      );
      print({`Acceleration branch done`})
    );
    print({`Induction step done`})
  );
  done;
  print({`Proof done`})
End.

End.

ArchiveEntry "Chinese Train Control System Level 3 (CTCS-3)".

Citation "Liang Zou, Jidong Lv, Shuling Wang, Naijun Zhan, Tao Tang, Lei Yuan, Yu Liu. Verifying Chinese Train Control System under a Combined Scenario by Theorem Proving. VSTTE 2013, pp. 262-280".
Link "https://doi.org/10.1007/978-3-642-54108-7_14".

Definitions.

  R Cb().
  R Ca().
  R CA().
  R T().
  R x1().
  R x2().
  R e21().
  R e22().
  R e23().
  R e31().
  R e32().
  R e33().

  R min(R,R).

  B initial() <-> (CA()=1
               & Ca()=-0.2
               & Cb()=-1
               & T()=0.125
               & x1()=3200
               & x2()=6400
               & e21()=3200
               & e22()=6400
               & e23()=9600
               & e31()=3200
               & e32()=6400
               & e33()=9600
               & a=0
               & v=0
               & s=0
               & i=0
               & lvl=2
               & lu=0
               & COswitched=0
               & conf=0
               & v211=105/3.6
               & v212=100/3.6
               & v221=105/3.6
               & v222=100/3.6
               & v231=45/3.6
               & v232=40/3.6
               & v311=255/3.6
               & v312=250/3.6
               & v321=255/3.6
               & v322=250/3.6
               & v331=0
               & v332=0).

  B testCO(R COswitched,R s) <-> (COswitched=0 & s<e32() & s>e32()-300).

  R fv(R v) = ((v+CA()*T())^2).

  HP FB2 ::= {
     vr1:=(v211+CA()*T())^2;
     vr1:=min(vr1,(v221*v221-2*Cb()*e21()+2*Cb()*s+Cb()*CA()*T()*T()+2*Cb()*v*T()));
     vr1:=min(vr1,(v231*v231-2*Cb()*e22()+2*Cb()*s+Cb()*CA()*T()*T()+2*Cb()*v*T()));
     vr1:=min(vr1,(2*Cb()*s-2*Cb()*e23()+Cb()*CA()*T()*T()+2*Cb()*v*T()));
     vr2:=(v212+CA()*T())^2;
     vr2:=min(vr2,(v222*v222-2*Cb()*e21()+2*Cb()*s+Cb()*CA()*T()*T()+2*Cb()*v*T()));
     vr2:=min(vr2,(v232*v232-2*Cb()*e22()+2*Cb()*s+Cb()*CA()*T()*T()+2*Cb()*v*T()));
     vr2:=min(vr2,(2*Cb()*s-2*Cb()*e23()+Cb()*CA()*T()*T()+2*Cb()*v*T()));
  }.

  HP FB22 ::= {
     vr1:=(v221+CA()*T())^2;
     vr1:=min(vr1,(v231*v231-2*Cb()*e22()+2*Cb()*s+Cb()*CA()*T()*T()+2*Cb()*v*T()));
     vr1:=min(vr1,(2*Cb()*s-2*Cb()*e23()+Cb()*CA()*T()*T()+2*Cb()*v*T()));
     vr2:=(v222+CA()*T())^2;
     vr2:=min(vr2,(v232*v232-2*Cb()*e22()+2*Cb()*s+Cb()*CA()*T()*T()+2*Cb()*v*T()));
     vr2:=min(vr2,(2*Cb()*s-2*Cb()*e23()+Cb()*CA()*T()*T()+2*Cb()*v*T()));

     vr1:=min(vr1,(v321+CA*T())^2);
     vr1:=min(vr1,(v331*v331-2*Cb()*e32()+2*Cb()*s+Cb()*CA()*T()*T()+2*Cb()*v*T()));
     vr1:=min(vr1,(2*Cb()*s-2*Cb()*e33()+Cb()*CA()*T()*T()+2*Cb()*v*T()));
     vr2:=min(vr2,(v322+CA*T())^2);
     vr2:=min(vr2,(v332*v332-2*Cb()*e32()+2*Cb()*s+Cb()*CA()*T()*T()+2*Cb()*v*T()));
     vr2:=min(vr2,(2*Cb()*s-2*Cb()*e33()+Cb()*CA()*T()*T()+2*Cb()*v*T()));
  }.

  HP FB3 ::= {
     vr1:=(v331+CA()*T())^2;
     vr1:=min(vr1,(2*Cb()*s-2*Cb()*e33()+Cb()*CA()*T()*T()+2*Cb()*v*T()));
     vr2:=(v332+CA()*T())^2;
     vr2:=min(vr2,(2*Cb()*s-2*Cb()*e33()+Cb()*CA()*T()*T()+2*Cb()*v*T()));
  }.

  HP switchCO ::= {
     v331:=45/3.6; v332:=40/3.6;
  }.

  HP accl ::= {
     ? fv(v)>=vr1 ; a:=Cb();
  ++ ? fv(v)>=vr2 & fv(v)<vr1; a:=Ca();
  ++ ? fv(v)<vr1  & fv(v)<vr2; a:=CA();
  }.

  HP I2 ::= {
     ? i=2 & s>=x1(); lvl:=2.5; I2a;
  ++ ? i=0 & s>200; i:=1; lu:=1; i:=2; FB2; accl;
  ++ ? (i=0 & s<=200) | (i=2 & s<x1()); FB2; accl;
  }.

  HP I2a ::= {
     ? s>x2(); lvl:=3; I3;
  ++ ? s<=x2(); FB22; accl;
  }.

  HP I3 ::= {
     ?  testCO(COswitched,s); conf:=1; COswitched:=1; switchCO; FB3; accl;
  ++ ? !testCO(COswitched,s); FB3; accl;
  }.

  HP ctrl ::= {
     ? lvl=2; I2;
  ++ ? lvl=2.5; I2a;
  ++ ? lvl=3; I3;
  }.

  HP drive ::= {
    t := 0;
    {s'=v, v'=a, t'=1 & v>=0 & t<=T()}
  }.

End.

ProgramVariables.

  R a.
  R v.
  R s.
  R lvl.
  R lu.
  R i.
  R COswitched.
  R conf.
  R t.
  R vr1.
  R vr2.
  R v211.
  R v212.
  R v221.
  R v222.
  R v231.
  R v232.
  R v311.
  R v312.
  R v321.
  R v322.
  R v331.
  R v332.

End.

Problem.

initial() ->
[
  {ctrl; drive;}*
](s<=x2())

End.

End.

ArchiveEntry "Lunar lander descent guidance (slow descent)".

Citation "Hengjun ZhaoMengfei YangNaijun ZhanBin GuLiang ZouYao Chen. Formal Verification of a Descent Guidance Control Program of a Lunar Lander. FM 2014.".

Definitions.
  R Isp1   = (2500).  /* thrust engine impulse (low thrust) */
  R Isp2   = (2800).  /* thrust engine impulse (high thrust) */
  R gM     = (1.622). /* gravitational acceleration on the moon */
  R eps    = (0.05).  /* v fluctuation tolerance */
  R vslw   = (-2).    /* target velocity slow descent */
  R vmax   = (5).     /* max velocity */
  R DeltaT = (0.128). /* controller sampling time */
  R mMin   = (1100).  /* maximum lander mass */
  R mMax   = (3000).  /* minimum lander mass */
  R c1     = (0.01).  /* control coeffiecent */
  R c2     = (0.6).   /* control coefficient */
End.

ProgramVariables.
  R r.   /* altitude relative to lunar surface */
  R v.   /* vertical velocity */
  R m.   /* lunar lander mass */
  R Fc.  /* lander thrust */
  R t.   /* time */
  R isp. /* engine impulse depending on thrust */

  R a.
  R alC.
End.

Problem.
  m=1250 & r=30 & v=-2 & Fc=2027.5
  ->
  [{
     /* guidance program (plant updates mass) */
     {
     a := Fc/m;
     alC := max(-c1*(a-gM) - c2*(v-vslw) + gM, 1500);
     Fc := max(min(m*alC, 5000), 1500);
     }
     /* plant */
     {
     t:=0;
     if (Fc <= 3000) { isp:=Isp1; } else { isp:=Isp2; }
     /*{ r'=v, v'=Fc/m-gM, m'=-Fc/isp, t'=1 & r>=0 & t<=DeltaT & mMin<=m&m<=mMax }*/
     /* recast per paper */
     { r'=v, v'=a-gM, a'=a^2/isp, t'=1 & r>=0 & t<=DeltaT & mMin<=m&m<=mMax }
     }
   }*@invariant( (v - vslw)^2 <= eps^2 & v^2<=vmax^2 )
  ]((v - vslw)^2 <= eps^2 & v^2<=vmax^2)
End.

End.
