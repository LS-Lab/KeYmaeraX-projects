ArchiveEntry "Benchmarks/Nonlinear/Traffic Scenario"

Definitions
  import kyx.math.tan;

  /* Disturbances */
  Real w1;
  Real w2;

  Real lwb = 2.578; /* Length of wheel base */

  HP dyn ::= { {
    /* x' = f(x,uref+K*(x+z-xref),w) */
    d'  = u1 + w1,
    p'  = v/lwb * tan(d),
    v'  = u2 + w2,
    sx' = v*cos(p),
    sy' = v*sin(p),
    /* xref' = f(xref,uref,0) */
    dref' = u1ref,
    pref' = vref/lwb * tan(dref),
    vref' = u2ref,
    sxref'= vref*cos(pref),
    syref'= vref*sin(pref)
  } };

  HP sense ::= {
    dhat := *; 
    phat := *;
    vhat := *; 
    sxhat := *;
    syhat := *;
    ?Z(dhat-d, phat-p, vhat-v, sxhat-sx, syhat-sy);
  };

  HP control ::= {
    /* read next element of reference trajectory */
    u1ref := *;
    u2ref := *; 
    ?U(u1ref,u2ref);

    /* read next element of feedback matrix */
    K1_1 := *; K1_2 := *; K1_3 := *; K1_4 := *; K1_5 := *;
    K2_1 := *; K2_2 := *; K2_3 := *; K2_4 := *; K2_5 := *;
    
    /* worst-case analysis: for u1ref,u2ref \in U we get u1,u2 \in U only when K=0 or when xhat=xref */
    ?K1_1 = 0 & K1_2 = 0 & K1_3 = 0 & K1_4 = 0 & K1_5 = 0
    &K2_1 = 0 & K2_2 = 0 & K2_3 = 0 & K2_4 = 0 & K2_5 = 0;

    /* apply tracking controller */
    u1 := ufb(
      dhat, phat, vhat, sxhat, syhat, 
      u1ref, 
      K1_1, K1_2, K1_3, K1_4, K1_5,
      dref, pref, vref, sxref, syref);    
    u2 := ufb(
      dhat, phat, vhat, sxhat, syhat, 
      u2ref, 
      K2_1, K2_2, K2_3, K2_4, K2_5,
      dref, pref, vref, sxref, syref);    
  };

  /* Tracking controller: use with appropriate elements of U and K */
  Real ufb(
    /* Measured state xhat: R^5 */
    Real dhat, Real phat, Real vhat, Real sxhat, Real syhat, 
    /* Reference control inputs uref: R^2 */
    Real uref, 
    /* Feedback matrix K: R^(2x5) */
    Real K_1, Real K_2, Real K_3, Real K_4, Real K_5, 
    /* Reference trajectory xref: R^5 */
    Real dref, Real pref, Real vref, Real sxref, Real syref) = (
      /* uref + K*(x - xref) */
      uref + (K_1*(dhat-dref) + K_2*(phat-pref) + K_3*(vhat-vref) + K_4*(sxhat-sxref) + K_5*(syhat-syref))
  );
  
  /* Measurement error set Z */
  Bool Z(Real z1, Real z2, Real z3, Real z4, Real z5) <-> (
      (-0.0004 <= z1 & z1 <= 0.0004)
    & (-0.0004 <= z2 & z2 <= 0.0004)
    & (-0.006  <= z3 & z3 <= 0.006)
    & (-0.002  <= z4 & z4 <= 0.002)
    & (-0.002  <= z5 & z5 <= 0.002)
  );

  /* Input set U */
  Bool U(Real u1, Real u2) <-> (
      (-0.7 <= u1 & u1 <= 0.7)
    & (-11 <= u2 & u2 <= 11)
  );

  /* Disturbance set W */
  Bool W(Real w1, Real w2) <-> ( 
      (-0.02 <= w1 & w1 <= 0.02)
    & (-0.3 <= w2 & w2 <= 0.3)
  );

  /* Initial set */
  Bool I(
    Real d, Real p, Real v, Real sx, Real sy,
    Real dref, Real pref, Real vref, Real sxref, Real syref) <-> (
      Z(d-dref, p-pref, v-vref, sx-sxref, sy-syref)
  );
End.

ProgramVariables
  Real d;      /* Steering angle */
  Real p;      /* Vehicle heading */
  Real v;      /* Speed */
  Real sx, sy; /* Position */

  /* Measured variables */
  Real dhat, phat, vhat, sxhat, syhat;

  /* Reference variables */
  Real dref, pref, vref, sxref, syref;

  /* Feedback matrix K */
  Real K1_1, K1_2, K1_3, K1_4, K1_5,
       K2_1, K2_2, K2_3, K2_4, K2_5;

  Real u1;     /* Control input: steering */
  Real u2;     /* Control input: acceleration */

  /* Reference control */
  Real u1ref, u2ref;
End.

Problem
    I(d,    p,    v,    sx,    sy,
      dref, pref, vref, sxref, syref)
  & U(u1, u2)    
  -> [
    {
      sense;
      control;
      dyn;
    }*@invariant(U(u1, u2))
  ]U(u1,u2)

End.

Tactic "Scripted proof"
unfold;
loop("U(u1,u2)", 'R=="[{sense{|^@|};control{|^@|};dyn{|^@|};}*]U(u1,u2)"); <(
  "Init":
    id,
  "Post":
    id,
  "Step":
    expandAllDefs();
    auto
)  
End.

Tactic "Automated proof"
expandAllDefs();
auto
End.

End.

ArchiveEntry "Benchmarks/Nonlinear/Robertson Chemical Reaction"

Definitions
  Real a, b, g;   /* Coefficients */
  Real s;         /* Initial sum of concentrations */
End.

ProgramVariables
  Real x, y, z;   /* Concentrations of species */
End.

Problem
  x+y+z=s
  ->
  [{ x' = -a*x + b*y*z,
     y' = a*x - b*y*z - g*y^2,
     z' = g*y^2
   }
  ](x+y+z=s)
End.

Tactic "Scripted proof"
  unfold;
  dIClose('R=="[{x'=-a()*x+b()*y*z,y'=a()*x-b()*y*z-g()*y^2,z'=g()*y^2}]x+y+z=s()")
End.

Tactic "Automated proof"
  autoClose
End.

End.

ArchiveEntry "Benchmarks/Nonlinear/SinCos Taylor Model"

Definitions
  Real r0, r1;
End.

ProgramVariables
  Real x,y;
  Real t;
End.

Problem

(t = 0 
 & x = 0.01*r0() + 0*r1() + 0.5 
 & y = 0*r0() + 0.01*r1() + 0)
 & (-1 <= r0() & r0() <= 1) 
 & (-1 <= r1() & r1() <= 1)
->
[
  {x' = y, y' = x, t' = 1 & 0 <= t & t <= 0+0.5}
]!(x^2 + y^2 > 1.1)

End.

Tactic "Scripted Proof"
implyR(1);
cutTM("1", "2", 1);
dW(1);
(andL('L))*;
existsL(-1);
(andL('L))*;
allL2R('L=="t=0+s");
hideL('L=="t=0+s");
fullSimplify;
QE
End.

End.

ArchiveEntry "Benchmarks/Nonlinear/Coupled van der Pol"

Definitions
  Real m, b;
  Real r0, r1, r2, r3;
End.

ProgramVariables
  Real x1, x2, y1, y2;    /* oscillators */
  Real t;                 /* time */
End.

Problem
  /* Original Problem */
  /*
    1 <= b & b <= 3
  & m = 1
  & 1.25 <= x1 & x1 <= 1.55 & 1.25 <= x2 & x2 <= 1.55
  & 2.35 <= y1 & y1 <= 2.45 & 2.35 <= y2 & y2 <= 2.45
  & t = 0
  ->
  [{ x1' = y1,
     y1' = m*(1-x1^2)*y1 + b*(x2-x1) - x1,
     x2' = y2,
     y2' = m*(1-x2^2)*y2 - b*(x2-x1) - x2,
     t' = 1
     & 0<=t & t<=0+7
   }
  ]!(y1>=2.75 & y2>=2.75)
  */

  /* Simplified problem b=1, m=1, t<=0.1, encoded ranges */
  (t=0 
   & x1 = 0.15*r0()+   0*r1()+   0*r2()+   0*r3() + 1.4 
   & y1 =   0*r0()+   0*r1()+0.05*r2()+   0*r3() + 2.4
   & x2 =   0*r0()+0.15*r1()+   0*r2()+   0*r3() + 1.4
   & y2 =   0*r0()+   0*r1()+   0*r2()+0.05*r3() + 2.4)
   & (-1 <= r0() & r0() <= 1)
   & (-1 <= r1() & r1() <= 1)
   & (-1 <= r2() & r2() <= 1)
   & (-1 <= r3() & r3() <= 1)
  ->
  [{ x1' = y1,
     y1' = (1-x1^2)*y1 - 2*x1 + x2,
     x2' = y2,
     y2' = (1-x2^2)*y2 - 2*x2 + x1,
     t' = 1
     & 0<=t & t<=0+0.1
   }
  ]!(y1>=2.75 & y2>=2.75)
End.

Tactic "Scripted proof"
implyR(1);
cutTM("2", "10", 1);
dW(1);
(andL('L))*;
existsL(-1);
(andL('L))*;
allL2R('L=="t=0+s");
hideL('L=="t=0+s");
fullSimplify;
print("Taylor Model");
QE
End.

End.

ArchiveEntry "Benchmarks/Nonlinear/Laub-Loomis"

Definitions
  Real W = 0.1;
  Bool box(Real x, Real c, Real w) <-> c-w <= x & x<= c+w;
End.

ProgramVariables
  Real x1, x2, x3, x4, x5, x6, x7;  /* state space */
  Real t;                           /* time */
End.

Problem
    box(x1, 1.2, W)
  & box(x2, 1.05, W)
  & box(x3, 1.5, W)
  & box(x4, 2.4, W)
  & box(x5, 1, W)
  & box(x6, 0.1, W)
  & box(x7, 0.45, W)
  & t=0
  ->
  [{ x1' = 1.4*x3 - 0.9*x1,
     x2' = 2.5*x5 - 1.5*x2,
     x3' = 0.6*x7 - 0.8*x2*x3,
     x4' = 2 - 1.3*x3*x4,
     x5' = 0.7*x1 - x4*x5,
     x6' = 0.3*x1 - 3.1*x6,
     x7' = 1.8*x6 - 1.5*x2*x7,
     t'  = 1
     & 0<=t & t<=20
   }
  ]!(x4>=5)
End.

End.

ArchiveEntry "Benchmarks/Nonlinear/Laub-Loomis Taylor Model"

Definitions
  Real W = 0.1;
  Real r0, r1, r2, r3, r4, r5, r6;  
End.

ProgramVariables
  Real x1, x2, x3, x4, x5, x6, x7;  /* state space */
  Real t;                           /* time */
End.

Problem
  (t=0 
   & x1 = W*r0() + 0*r1() + 0*r2() + 0*r3() + 0*r4() + 0*r5() + 0*r6() + 1.2 
   & x2 = 0*r0() + W*r1() + 0*r2() + 0*r3() + 0*r4() + 0*r5() + 0*r6() + 1.05
   & x3 = 0*r0() + 0*r1() + W*r2() + 0*r3() + 0*r4() + 0*r5() + 0*r6() + 1.5
   & x4 = 0*r0() + 0*r1() + 0*r2() + W*r3() + 0*r4() + 0*r5() + 0*r6() + 2.4
   & x5 = 0*r0() + 0*r1() + 0*r2() + 0*r3() + W*r4() + 0*r5() + 0*r6() + 1.0
   & x6 = 0*r0() + 0*r1() + 0*r2() + 0*r3() + 0*r4() + W*r5() + 0*r6() + 0.1
   & x7 = 0*r0() + 0*r1() + 0*r2() + 0*r3() + 0*r4() + 0*r5() + W*r6() + 0.45   
   )
   & (-1 <= r0() & r0() <= 1)
   & (-1 <= r1() & r1() <= 1)
   & (-1 <= r2() & r2() <= 1)
   & (-1 <= r3() & r3() <= 1)
   & (-1 <= r4() & r4() <= 1)
   & (-1 <= r5() & r5() <= 1)
   & (-1 <= r6() & r6() <= 1)
  ->
  [{ x1' = 1.4*x3 - 0.9*x1,
     x2' = 2.5*x5 - 1.5*x2,
     x3' = 0.6*x7 - 0.8*x2*x3,
     x4' = 2 - 1.3*x3*x4,
     x5' = 0.7*x1 - x4*x5,
     x6' = 0.3*x1 - 3.1*x6,
     x7' = 1.8*x6 - 1.5*x2*x7,
     t'  = 1
     & 0<=t & t<=0+0.1
   }
  ]!(x4>=5)
End.

Tactic "Scripted proof"
implyR(1);
expandAllDefs();
cutTM("2", "7", 1);
dW(1);
(andL('L))*;
existsL(-1);
(andL('L))*;
allL2R('L=="t=0+s");
hideL('L=="t=0+s");
fullSimplify;
print("Taylor Model");
QE
End.

End.

ArchiveEntry "Benchmarks/Nonlinear/Laub-Loomis Stability"

Definitions
  Real W = 0.1;
  Bool box(Real x, Real c, Real w) <-> c-w <= x & x<= c+w;
  Real normsq(Real x1, Real x2, Real x3, Real x4, Real x5, Real x6, Real x7) = x1^2 + x2^2 + x3^2 + x4^2 + x5^2 + x6^2 + x7^2;
End.

ProgramVariables  
  Real t;                           /* time */
End.

Problem
  t=0 &
  \forall eps (eps > 0 ->
  \exists delta (delta > 0 &
  \forall x1 \forall x2 \forall x3 \forall x4 \forall x5 \forall x6 \forall x7 (
    box(x1, 1.2, W)
  & box(x2, 1.05, W)
  & box(x3, 1.5, W)
  & box(x4, 2.4, W)
  & box(x5, 1, W)
  & box(x6, 0.1, W)
  & box(x7, 0.45, W)
  & normsq(x1,x2,x3,x4,x5,x6,x7) < delta^2
  ->
  [{ x1' = 1.4*x3 - 0.9*x1,
     x2' = 2.5*x5 - 1.5*x2,
     x3' = 0.6*x7 - 0.8*x2*x3,
     x4' = 2 - 1.3*x3*x4,
     x5' = 0.7*x1 - x4*x5,
     x6' = 0.3*x1 - 3.1*x6,
     x7' = 1.8*x6 - 1.5*x2*x7,
     t'  = 1
     & 0<=t & t<=20
   }
  ]normsq(x1,x2,x3,x4,x5,x6,x7) < eps^2
  )))
End.

End.

Theorem "Benchmarks/Nonlinear/Lotka-Volterra with tangential crossing (Invariance)"

/* General version */

Definitions
  import kyx.math.exp;
  Real a=3;
  Real b=3;
  Real d=1;
  Real g=1;
  Real K(Real x, Real y) = exp(-d*x-b*y) * x^g * y^a;             /* Conserved energy in x>0 & y>0 */
End.

ProgramVariables
  Real x, y, K_0;
End.

Problem
    x>0
  & y>0
  & K_0 = K(x,y)
  ->
  [{ x' = a*x - b*x*y,
     y' = d*x*y - g*y
   }
  ]K(x,y) = K_0
End.

Tactic "Scripted proof"
unfold;
dIRule(1); <(
  "dI Init":
    equalCommute(1);
    id,
  "dI Step":
    chaseAt(1);
    QE using "(exp(-1*x-3*y)*(-1*(3*x-3*x*y)-3*(1*x*y-1*y))*x^1+exp(-1*x-3*y)*(1*x^(1-1)*(3*x-3*x*y)))*y^3+exp(-1*x-3*y)*x^1*(3*y^(3-1)*(1*x*y-1*y))=0"
)
End.

Tactic "Automated proof"
  autoClose
End.

End.

ArchiveEntry "Benchmarks/Nonlinear/Lotka-Volterra with tangential crossing (Crossing)"

/* Cross */

Definitions
  import kyx.math.exp;
  Real a = 3;
  Real b = 3;
  Real d = 1;
  Real g = 1;
  Real R = 0.161;
  Real ep = 0.012;
  Real Qx = a/b;
  Real Qy = g/d;
  Real K(Real x, Real y) = exp(-d*x-b*y) * x^g * y^a;             /* Conserved energy in x>0 & y>0 */
End.

Problem
  /* no crossing above Qy for +ep */
    \forall xi \forall yi (K(xi,yi)=K(Qx+0.3+ep,Qy) & yi>=Qy -> (xi - Qx)^2 + (yi - Qy)^2  > R^2)
  /* crossing below Qy for +ep */
  & \exists xi \exists yi (K(xi,yi)=K(Qx+0.3+ep,Qy) & yi<Qy & (xi - Qx)^2 + (yi - Qy)^2 <= R^2)
  /* crossing above Qy for -ep */
  & \exists xi \exists yi (K(xi,yi)=K(Qx+0.3-ep,Qy) & yi>=Qy -> (xi - Qx)^2 + (yi - Qy)^2 <= R^2)
  /* crossing below Qy for -ep */
  & \exists xi \exists yi (K(xi,yi)=K(Qx+0.3-ep,Qy) & yi<Qy & (xi - Qx)^2 + (yi - Qy)^2 <= R^2)
End.

End.

ArchiveEntry "Benchmarks/Nonlinear/Space Craft Rendezvous"

Definitions
  import kyx.math.abs;
  /* Parameters of dynamics. */
  Real mu = 3.986 * 10^14 * 60^2;         /* Units: m^3 / min^2. */
  Real r = 42164 * 10^3;                  /* Units: m. */
  Real mc = 500;                          /* Mass of spacecraft in kg. */
  Real n = (mu/r^3)^(1/2);
  Real rc(Real x, Real y) = ((r^2+x^2) + y^2)^(1/2);  /* Units: m. */
  Real boxCorner = 0.1;                          /* Corner coordinate of the space station square centered at origin. */
  Real endT = 200;                               /* Maneuver time. */
  Real abortT;                                   /* Time at which transition to aborting mode occurs, in [120, 150]. */

  /* Dynamics. */
  Real dvx(Real x, Real vy, Real y, Real ux) = n^2*x + 2*n*vy + (mu/r^2) + (mu/rc(x, y)^3)*(r+x) + ux/mc;
  Real dvy(Real y, Real vx, Real x, Real uy) = n^2*y + 2*n*vx + (mu/rc(x, y)^3)*(y) + uy/mc;

  Real apprXMatrix(Real a, Real b, Real c, Real d) = -28.8287*a + 0.1005*b - 1449.9754*c + 0.0046*d;
  Real apprYMatrix(Real a, Real b, Real c, Real d) = -0.087*a - 33.2562*b - 0.00462*c + 1451.5013*d;
  Real rendXMatrix(Real a, Real b, Real c, Real d) = -28.0288*a + 0.1312*b - 9614.989*c + 0;
  Real rendYMatrix(Real a, Real b, Real c, Real d) = -0.1312*a - 288*b + 0*c - 9614.9883*d;

  /* Safety conditions. */

  /* The spaceship is always in line of sight (centered around y axis, */
  Bool rAttempt(Real x) <-> x>=-100;
  Bool lineOfSight(Real x, Real y) <->
    rAttempt(x) -> (x>=-100 & y<=abs(x/3^(1/2)) & y>=-abs(x/3^(1/2)));

  /* The spaceship is always outside the edges of the square representing the space station. */
  Bool aborting(Real t) <-> t>=abortT;
  Bool collisionAvoidance(Real t, Real x, Real y) <->
    aborting(t) -> (x>boxCorner | y>boxCorner | x<(-boxCorner) | y<(-boxCorner));

  /* Speed is bounded. */
  Bool vBound(Real vx, Real vy) <-> (vx^2 + vy^2)^(1/2) <= 3.3;

  /* Initial Conditions. */
  Bool initPos(Real x, Real y) <-> x >= -925 & x <= -875 & y >= -425 & y<= -375;
  Bool initVel(Real vx, Real vy) <-> vx>=0 & vx<=5 & vy>=0 & vy<=5;
  Bool init(Real x, Real y, Real vx, Real vy) <->
    abortT>120 & abortT<150 & initPos(x, y) & initVel(vx, vy);
End.

ProgramVariables
  Real x;   /* x position of spacecraft in m. */
  Real vx;  /* x velocity of spacecraft in meters/minute. */
  Real y;   /* y position of spacecraft in m. */
  Real vy;  /* y velocity of spacecraft in meters/minute. */
  Real t;   /* Time in minutes. */
  Real ux;  /* x acceleration effort. */
  Real uy;  /* y acceleration effort. */
End.

Problem
init(x, y, vx, vy) ->
[
  /* Approaching. */
  t:=0;
  ux:=apprXMatrix(x, y, vx, vy);
  uy:=apprYMatrix(x, y, vx, vy);
  {x' = vx,
   y' = vy,
   vx' = dvx(x, vy, y, ux),
   vy' = dvy(y, vx, x, uy),
   ux' = apprXMatrix(vx, vy, dvx(x, vy, y, ux), dvy(y, vx, x, uy)),
   uy' = apprYMatrix(vx, vy, dvx(x, vy, y, ux), dvy(y, vx, x, uy)),
      t'=1 & x<=-100 & x>=-1000
  };
  /* Rendezvous attempt. */
  ux:=rendXMatrix(x, y, vx, vy);
  uy:=rendYMatrix(x, y, vx, vy);
  {x' = vx,
   y' = vy,
   vx' = dvx(x, vy, y, ux),
   vy' = dvy(y, vx, x, uy),
   ux' = rendXMatrix(vx, vy, dvx(x, vy, y, ux), dvy(y, vx, x, uy)),
   uy' = rendYMatrix(vx, vy, dvx(x, vy, y, ux), dvy(y, vx, x, uy)),
      t'=1 & x>=-100 & t<=abortT
  };
  /* Aborting. */
  ux:=0;
  uy:=0;
  {x' = vx,
   y' = vy,
   vx' = dvx(x, vy, y, ux),
   vy' = dvy(y, vx, x, uy),
      t'=1 & t>=abortT & t<=endT
  };
](lineOfSight(x, y) & collisionAvoidance(t, x, y) & vBound(vx, vy))
End.

End.
